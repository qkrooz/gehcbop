[{"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\index.js":"1","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\App.js":"2","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_resources\\serverRoutes.js":"3","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_resources\\useLocalStorage.js":"4","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_context\\MainContext.js":"5","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\Main.js":"6","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\login\\index.js":"7","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\index.js":"8","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\CartsChart.js":"9","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\OrdersChart.js":"10","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\NavBar.js":"11","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\OrdersTotalChart.js":"12","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\resources\\InstallCartContext.js":"13","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Dashboard.js":"14","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Inventory.js":"15","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\NavBar.js":"16","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Orders.js":"17","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\ItSupportContext.js":"18","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\tableIcons.js":"19","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\inventoryColumns.js":"20","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\screens\\Miscellaneous.js":"21","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\index.js":"22","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\addForms.js":"23","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\desktopsTable.js":"24","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\laptopsTable.js":"25","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\laserPrintersTable.js":"26","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\mobilesTable.js":"27","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\reservedIpsTable.js":"28","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\sectionTitles.js":"29","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\screens\\Inventory.js":"30","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\labelPrintersTable.js":"31"},{"size":360,"mtime":1614638385520,"results":"32","hashOfConfig":"33"},{"size":3850,"mtime":1611687227400,"results":"34","hashOfConfig":"33"},{"size":131,"mtime":1611687227409,"results":"35","hashOfConfig":"33"},{"size":1289,"mtime":1611605962545,"results":"36","hashOfConfig":"33"},{"size":75,"mtime":1611605962476,"results":"37","hashOfConfig":"33"},{"size":11217,"mtime":1614638385490,"results":"38","hashOfConfig":"33"},{"size":4943,"mtime":1611687227407,"results":"39","hashOfConfig":"33"},{"size":10865,"mtime":1613598043547,"results":"40","hashOfConfig":"33"},{"size":2637,"mtime":1613598043543,"results":"41","hashOfConfig":"33"},{"size":4128,"mtime":1611870362900,"results":"42","hashOfConfig":"33"},{"size":2776,"mtime":1613598043544,"results":"43","hashOfConfig":"33"},{"size":2190,"mtime":1612301560925,"results":"44","hashOfConfig":"33"},{"size":86,"mtime":1611605962460,"results":"45","hashOfConfig":"33"},{"size":7551,"mtime":1613598043551,"results":"46","hashOfConfig":"33"},{"size":13428,"mtime":1612463124121,"results":"47","hashOfConfig":"33"},{"size":1959,"mtime":1613598043564,"results":"48","hashOfConfig":"33"},{"size":38894,"mtime":1613166095549,"results":"49","hashOfConfig":"33"},{"size":84,"mtime":1612464285908,"results":"50","hashOfConfig":"33"},{"size":2307,"mtime":1611605962476,"results":"51","hashOfConfig":"33"},{"size":3240,"mtime":1613598043568,"results":"52","hashOfConfig":"33"},{"size":104,"mtime":1611605962476,"results":"53","hashOfConfig":"33"},{"size":4469,"mtime":1614714940250,"results":"54","hashOfConfig":"33"},{"size":14569,"mtime":1614714725345,"results":"55","hashOfConfig":"33"},{"size":5250,"mtime":1614715116677,"results":"56","hashOfConfig":"33"},{"size":7098,"mtime":1614715322460,"results":"57","hashOfConfig":"33"},{"size":5243,"mtime":1614715201122,"results":"58","hashOfConfig":"33"},{"size":6985,"mtime":1614715370436,"results":"59","hashOfConfig":"33"},{"size":4867,"mtime":1614715490347,"results":"60","hashOfConfig":"33"},{"size":211,"mtime":1614638385510,"results":"61","hashOfConfig":"33"},{"size":5908,"mtime":1614715519526,"results":"62","hashOfConfig":"33"},{"size":6638,"mtime":1614715444037,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"202g0q",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\index.js",[],["130","131"],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\App.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_resources\\serverRoutes.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_resources\\useLocalStorage.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_context\\MainContext.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\Main.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\login\\index.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\index.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\CartsChart.js",["132"],"import React, { useContext, useLayoutEffect } from \"react\";\r\nimport { InstallCartContext } from \"../resources/InstallCartContext\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\n// import am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport \"../styles/charts.css\";\r\nconst CartsChart = React.memo((props) => {\r\n  const { cartsState } = useContext(InstallCartContext);\r\n  const [carts] = cartsState;\r\n  useLayoutEffect(() => {\r\n    var chart = am4core.create(\"chartdiv2\", am4charts.XYChart);\r\n    let data = [\r\n      {\r\n        cartType: \"In Stock\",\r\n        value: carts.filter((item) => item.STATUS === \"In Stock\").length,\r\n      },\r\n      {\r\n        cartType: \"Reserved In\",\r\n        value: carts.filter((item) => item.STATUS === \"Reserved In\").length,\r\n      },\r\n      {\r\n        cartType: \"Reserved\",\r\n        value: carts.filter((item) => item.STATUS === \"Reserved\").length,\r\n      },\r\n      {\r\n        cartType: \"Deployed\",\r\n        value: carts.filter((item) => item.STATUS === \"Deployed\").length,\r\n      },\r\n    ];\r\n    chart.data = data;\r\n    var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n    categoryAxis.dataFields.category = \"cartType\";\r\n    categoryAxis.renderer.grid.template.location = 0;\r\n    categoryAxis.renderer.minGridDistance = 30;\r\n\r\n    categoryAxis.renderer.labels.template.adapter.add(\r\n      \"dy\",\r\n      function (dy, target) {\r\n        if (target.dataItem && target.dataItem.index & (2 == 2)) {\r\n          return dy + 25;\r\n        }\r\n        return dy;\r\n      }\r\n    );\r\n\r\n    chart.yAxes.push(new am4charts.ValueAxis());\r\n\r\n    // Create series\r\n    var series = chart.series.push(new am4charts.ColumnSeries());\r\n    series.dataFields.valueY = \"value\";\r\n    series.dataFields.categoryX = \"cartType\";\r\n    // series.name = \"cartType\";\r\n    series.columns.template.tooltipText = \"{categoryX}: [bold]{valueY}[/]\";\r\n    series.columns.template.fillOpacity = 0.8;\r\n    var columnTemplate = series.columns.template;\r\n    columnTemplate.strokeWidth = 2;\r\n    columnTemplate.strokeOpacity = 1;\r\n    return () => {\r\n      chart.dispose();\r\n    };\r\n  }, [carts]);\r\n  return (\r\n    <div className=\"cartsChartContainer\" {...props}>\r\n      <div\r\n        className=\"deco-fix\"\r\n        style={{\r\n          width: \"25%\",\r\n          height: \"2.2em\",\r\n          position: \"absolute\",\r\n          backgroundColor: \"white\",\r\n          bottom: 0,\r\n          zIndex: 2,\r\n        }}\r\n      ></div>\r\n      <div id=\"chartdiv2\" style={{ width: \"100%\", height: \"250px\" }}></div>\r\n    </div>\r\n  );\r\n});\r\nexport default CartsChart;\r\n","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\OrdersChart.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\NavBar.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\OrdersTotalChart.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\resources\\InstallCartContext.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Dashboard.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Inventory.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\NavBar.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Orders.js",["133"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { InstallCartContext } from \"../resources/InstallCartContext\";\r\nimport { Context } from \"../../../_context/MainContext\";\r\nimport {\r\n  Menu,\r\n  Button,\r\n  Tooltip,\r\n  Progress,\r\n  Dropdown,\r\n  Descriptions,\r\n  Steps,\r\n  Input,\r\n  DatePicker,\r\n  Select,\r\n  Form,\r\n  Space,\r\n  Checkbox,\r\n} from \"antd\";\r\nimport {\r\n  EditOutlined,\r\n  FileTextOutlined,\r\n  DeleteOutlined,\r\n  ExclamationCircleTwoTone,\r\n  EllipsisOutlined,\r\n  CaretUpOutlined,\r\n  CaretDownOutlined,\r\n  MinusCircleOutlined,\r\n  PlusOutlined,\r\n} from \"@ant-design/icons\";\r\nimport moment from \"moment\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Collapse from \"react-collapse\";\r\nimport MaterialButton from \"@material-ui/core/Button\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport SortIcon from \"@material-ui/icons/Sort\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\n// Components\r\nimport OrdersChart from \"../components/OrdersChart\";\r\nimport CartsChart from \"../components/CartsChart\";\r\nimport OrdersTotalChart from \"../components/OrdersTotalChart\";\r\nimport \"../styles/orders.css\";\r\nimport \"../styles/addForm.css\";\r\nconst { Step } = Steps;\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\nconst Orders = React.memo(() => {\r\n  const {\r\n    ordersState,\r\n    SwitchOrders,\r\n    ordersSwitchState,\r\n    ordersCheckboxState,\r\n    SearchOrders,\r\n    ToggleComplete,\r\n    addDialogVisibilityState,\r\n    workingOrderState,\r\n  } = useContext(InstallCartContext);\r\n  const [orders] = ordersState;\r\n  const [ordersCheckbox] = ordersCheckboxState;\r\n  const [ordersSwitch] = ordersSwitchState;\r\n  const [workingOrder] = workingOrderState;\r\n  const [searchText_temp, setSearchText_temp] = useState(\"\");\r\n  const [, setAddDialogVisibility] = addDialogVisibilityState;\r\n  useEffect(() => {\r\n    console.log(workingOrder);\r\n  }, [workingOrder]);\r\n  return (\r\n    <div className=\"ordersMainContainer\">\r\n      <div className=\"ordersContainer\">\r\n        <div className=\"ordersList\">\r\n          <div className=\"ordersControls\">\r\n            <div>\r\n              <Grid container spacing={1} alignItems=\"flex-end\">\r\n                <Grid item>\r\n                  <SearchIcon />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    id=\"input-with-icon-grid\"\r\n                    label=\"Search orders\"\r\n                    size=\"small\"\r\n                    onChange={(event) => {\r\n                      SearchOrders(event);\r\n                      setSearchText_temp(event.target.value);\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n            <MaterialButton className=\"filterButton\" startIcon={<SortIcon />}>\r\n              Filters\r\n            </MaterialButton>\r\n            <div className=\"switchContainer\">\r\n              <div className=\"inner\">\r\n                <span>Show complete</span>\r\n                <Switch\r\n                  size=\"small\"\r\n                  disabled={ordersCheckbox}\r\n                  checked={ordersSwitch}\r\n                  onChange={(event) => {\r\n                    SwitchOrders(event, searchText_temp);\r\n                  }}\r\n                  color=\"primary\"\r\n                  name=\"checkedB\"\r\n                  inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n                />\r\n              </div>\r\n              <div className=\"inner\">\r\n                <span>Only completed</span>\r\n                <Switch\r\n                  size=\"small\"\r\n                  disabled={ordersSwitch}\r\n                  checked={ordersCheckbox}\r\n                  onChange={(event) => ToggleComplete(event.target.checked)}\r\n                  color=\"primary\"\r\n                  inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <MaterialButton\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disableElevation\r\n              startIcon={<AddIcon />}\r\n              onClick={() => {\r\n                setAddDialogVisibility(true);\r\n              }}\r\n            >\r\n              Add Order\r\n            </MaterialButton>\r\n          </div>\r\n          {Object.values(orders).map((order, i) => (\r\n            <OrderElement data={order} key={i} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"chartsContainer\">\r\n        <OrdersChart />\r\n        <CartsChart style={{ marginBottom: \"1em\" }} />\r\n        <OrdersTotalChart />\r\n      </div>\r\n      <AddDialog />\r\n      <DeleteConfirmDialog />\r\n      <EditDialog />\r\n    </div>\r\n  );\r\n});\r\nconst OrderElement = React.memo(({ data }) => {\r\n  const {\r\n    ordersState,\r\n    statusListState,\r\n    workingOrderState,\r\n    deleteDialogVisibilityState,\r\n    editDialogVisibilityState,\r\n  } = useContext(InstallCartContext);\r\n  const [orders] = ordersState;\r\n  const [, setDeleteDialogVisibility] = deleteDialogVisibilityState;\r\n  const [, setWorkingOrder] = workingOrderState;\r\n  const [statusList] = statusListState;\r\n  const [detailsCollapse, setDetailsCollapse] = useState(false);\r\n  const [coninfCollapse, setConinfCollapse] = useState(false);\r\n  const [statusProgress, setStatusProgress] = useState(0);\r\n  const [, setEditDialogVisibility] = editDialogVisibilityState;\r\n  useEffect(() => {\r\n    const progressPerSegment = (100 / statusList.length).toFixed(2);\r\n    statusList.forEach((item, i) => {\r\n      if (data.STATUS === \"order completed\") {\r\n        setStatusProgress(100);\r\n      } else {\r\n        switch (item) {\r\n          case data.STATUS:\r\n            setStatusProgress(progressPerSegment * (i + 1));\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    });\r\n    // eslint-disable-next-line\r\n  }, [orders]);\r\n  const ellipsisMenu = (\r\n    <Menu>\r\n      <Menu.Item key=\"0\">\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => {\r\n            setEditDialogVisibility(true);\r\n            setWorkingOrder(data);\r\n          }}\r\n        >\r\n          <EditOutlined />\r\n          Edit\r\n        </Button>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"1\">\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => {\r\n            setDeleteDialogVisibility(true);\r\n            setWorkingOrder(data);\r\n          }}\r\n        >\r\n          <DeleteOutlined />\r\n          Delete\r\n        </Button>\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n  return (\r\n    <div className=\"order-container-outter \">\r\n      <div className=\"order-container-inner\">\r\n        <Button style={{ marginRight: \"1.5em\" }} shape=\"circle\" size=\"large\">\r\n          <FileTextOutlined />\r\n        </Button>\r\n        <div className=\"primary-data-container\">\r\n          <Tooltip title=\"Project name\" placement=\"right\">\r\n            <span className=\"projName-label\">{data.PROJECT_NAME}</span>\r\n          </Tooltip>\r\n          <Tooltip title=\"General order number\" placement=\"right\">\r\n            <span className=\"gon-inner-label\">GON#</span>\r\n            <span className=\"gon-label\">{data.GON}</span>\r\n          </Tooltip>\r\n        </div>\r\n        <div className=\"fw-container\">\r\n          <span className=\"desc\">Fiscal Week</span>\r\n          <span className=\"fw-label\">{data.FW}</span>\r\n        </div>\r\n        <div className=\"dates-container\">\r\n          <span className=\"desc\">Ship Date</span>\r\n          <span className=\"date\">{data.SHIP_DATE}</span>\r\n          <span className=\"desc\">Requested On-Site Date</span>\r\n          <span className=\"date\">{data.ROSD}</span>\r\n        </div>\r\n        <div className=\"extra-info-container\">\r\n          <span className=\"desc\">Created Date</span>\r\n          <span className=\"date\">{data.CREATED_DATE}</span>\r\n          <span className=\"desc\">Owner</span>\r\n          <span className=\"date\">{data.OWNER}</span>\r\n        </div>\r\n        <div className=\"captions\">\r\n          {!data.STATUS ? (\r\n            <div className=\"caption-container\">\r\n              <ExclamationCircleTwoTone\r\n                twoToneColor=\"#faca0f\"\r\n                style={{ fontSize: \"18px\", marginRight: \"8px\" }}\r\n              />\r\n              <span className=\"caption-desc\">Status missing</span>\r\n            </div>\r\n          ) : null}\r\n          {!data.CONFIGURATION_INFORMATION ? (\r\n            <div className=\"caption-container\">\r\n              <ExclamationCircleTwoTone\r\n                twoToneColor=\"#faca0f\"\r\n                style={{ fontSize: \"18px\", marginRight: \"8px\" }}\r\n              />\r\n              <span className=\"caption-desc\">\r\n                Configuration Information missing\r\n              </span>\r\n            </div>\r\n          ) : null}\r\n          {!data.WRD ? (\r\n            <div className=\"caption-container\">\r\n              <ExclamationCircleTwoTone\r\n                twoToneColor=\"#faca0f\"\r\n                style={{ fontSize: \"18px\", marginRight: \"8px\" }}\r\n              />\r\n              <span className=\"caption-desc\">\r\n                Warehouse Requested Date missing\r\n              </span>\r\n            </div>\r\n          ) : null}\r\n          {!data.PROJECT_MANAGER ? (\r\n            <div className=\"caption-container\">\r\n              <ExclamationCircleTwoTone\r\n                twoToneColor=\"#faca0f\"\r\n                style={{ fontSize: \"18px\", marginRight: \"8px\" }}\r\n              />\r\n              <span className=\"caption-desc\">Project Manager missing</span>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        <div className=\"progress\">\r\n          <Progress\r\n            status={data.STATUS === \"cancelled\" ? \"exception\" : null}\r\n            type=\"dashboard\"\r\n            width={70}\r\n            strokeLinecap=\"square\"\r\n            style={{ marginBottom: 10 }}\r\n            percent={data.STAUTS === \"order completed\" ? 100 : statusProgress}\r\n          />\r\n          {data.STATUS ? (\r\n            <Tooltip title=\"Status\" placement=\"right\">\r\n              <span className=\"status-label\">{data.STATUS}</span>\r\n            </Tooltip>\r\n          ) : null}\r\n        </div>\r\n        <div className=\"controls\">\r\n          {data.STATUS === \"order completed\" ? null : (\r\n            <Dropdown trigger={[\"click\"]} overlay={ellipsisMenu}>\r\n              <Button type=\"text\" className=\"order-icon\">\r\n                <EllipsisOutlined className=\"button-icon\" />\r\n              </Button>\r\n            </Dropdown>\r\n          )}\r\n          <Button\r\n            type=\"text\"\r\n            className=\"order-icon\"\r\n            style={\r\n              data.STATUS === \"order completed\" ? { marginTop: \"auto\" } : null\r\n            }\r\n            onClick={() => {\r\n              setDetailsCollapse(!detailsCollapse);\r\n            }}\r\n          >\r\n            {detailsCollapse ? <CaretUpOutlined /> : <CaretDownOutlined />}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <Collapse isOpened={detailsCollapse}>\r\n        <div className=\"order-description\">\r\n          <Descriptions\r\n            bordered\r\n            style={{ marginRight: \"1em\", marginBottom: \"1em\" }}\r\n          >\r\n            <Descriptions.Item span={3} label=\"Project Name\">\r\n              {data.PROJECT_NAME}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item span={3} label=\"General Order Number\">\r\n              {data.GON}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item span={3} label=\"Owner\">\r\n              {data.OWNER}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item span={3} label=\"Project Manager\">\r\n              {data.PROJECT_MANAGER !== \"\" ? (\r\n                data.PROJECT_MANAGER\r\n              ) : (\r\n                <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                  <ExclamationCircleTwoTone\r\n                    twoToneColor=\"#faca0f\"\r\n                    style={{ fontSize: \"18px\", marginRight: \"8px\" }}\r\n                  />\r\n                  Missing\r\n                </span>\r\n              )}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item span={3} label=\"Fiscal Week\">\r\n              {data.FW}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item span={3} label=\"Created Date\">\r\n              {data.CREATED_DATE}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item span={3} label=\"Ship Date\">\r\n              {data.SHIP_DATE}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item span={3} label=\"Requested On-Site Date\">\r\n              {data.ROSD}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item span={3} label=\"Warehouse Requested Date\">\r\n              {data.WRD !== \"\" ? (\r\n                data.WRD\r\n              ) : (\r\n                <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                  <ExclamationCircleTwoTone\r\n                    twoToneColor=\"#faca0f\"\r\n                    style={{ fontSize: \"18px\", marginRight: \"8px\" }}\r\n                  />\r\n                  Missing\r\n                </span>\r\n              )}\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n          <div className=\"seccond-desc-container\">\r\n            <Descriptions bordered column={4} style={{ marginBottom: \"1em\" }}>\r\n              <Descriptions.Item\r\n                span={2}\r\n                label=\"Status\"\r\n                style={{ textTransform: \"capitalize\" }}\r\n              >\r\n                {data.STATUS !== \"\" ? (\r\n                  data.STATUS\r\n                ) : (\r\n                  <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <ExclamationCircleTwoTone\r\n                      twoToneColor=\"#faca0f\"\r\n                      style={{ fontSize: \"18px\", marginRight: \"8px\" }}\r\n                    />\r\n                    Missing\r\n                  </span>\r\n                )}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item span={2} label=\"Cart Usage\">\r\n                {/* {cartUsage[0].cartUsage} */}\r\n              </Descriptions.Item>\r\n            </Descriptions>\r\n            <Descriptions bordered column={4}>\r\n              <Descriptions.Item\r\n                span={4}\r\n                label=\"Device Count\"\r\n                style={{ padding: 0 }}\r\n              >\r\n                {/* <Table\r\n                    pagination={false}\r\n                    size=\"small\"\r\n                    dataSource={deviceCountData}\r\n                    columns={deviceCountColumns}\r\n                  /> */}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item\r\n                span={4}\r\n                label=\"Recommended Build\"\r\n                style={{ padding: 0 }}\r\n              >\r\n                {/* <Table\r\n                    pagination={false}\r\n                    size=\"small\"\r\n                    columns={recommendedCartBuildColumns}\r\n                    dataSource={recomendedCartBuildData}\r\n                  /> */}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item\r\n                span={4}\r\n                label=\"Configuration Information\"\r\n                style={{ whiteSpace: \"pre-wrap\" }}\r\n              >\r\n                {data.CONFIGURATION_INFORMATION === \"\" ? (\r\n                  <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <ExclamationCircleTwoTone\r\n                      twoToneColor=\"#faca0f\"\r\n                      style={{ fontSize: \"18px\", marginRight: \"8px\" }}\r\n                    />\r\n                    Missing\r\n                  </span>\r\n                ) : data.CONFIGURATION_INFORMATION.length > 200 ? (\r\n                  <>\r\n                    {!coninfCollapse ? (\r\n                      <div className=\"large-coninf-retro\">\r\n                        <div className=\"retro-style\"></div>\r\n                        <span className=\"coninf-content\">\r\n                          {data.CONFIGURATION_INFORMATION.substring(0, 100) +\r\n                            \". . .\"}\r\n                        </span>\r\n                      </div>\r\n                    ) : null}\r\n                    <Collapse\r\n                      isOpened={coninfCollapse}\r\n                      className=\"coninf-collapse\"\r\n                    >\r\n                      <span className=\"coninf-content\">\r\n                        {data.CONFIGURATION_INFORMATION}\r\n                      </span>\r\n                    </Collapse>\r\n                    <Button\r\n                      type=\"link\"\r\n                      style={{ width: \"100%\" }}\r\n                      onClick={() => {\r\n                        setConinfCollapse(!coninfCollapse);\r\n                      }}\r\n                    >\r\n                      {!coninfCollapse ? (\r\n                        <CaretDownOutlined />\r\n                      ) : (\r\n                        <CaretUpOutlined />\r\n                      )}\r\n                    </Button>\r\n                  </>\r\n                ) : (\r\n                  <span className=\"coninf-content\">\r\n                    {data.CONFIGURATION_INFORMATION}\r\n                  </span>\r\n                )}\r\n              </Descriptions.Item>\r\n            </Descriptions>\r\n          </div>\r\n        </div>\r\n        <div className=\"order-trace\">\r\n          <Steps\r\n            progressDot\r\n            current={statusList.findIndex((item) => item === data.STATUS)}\r\n            direction=\"vertical\"\r\n            size=\"small\"\r\n            status={\r\n              data.STATUS === \"cancelled\"\r\n                ? \"error\"\r\n                : data.STATUS === \"order completed\"\r\n                ? \"finish\"\r\n                : \"process\"\r\n            }\r\n          >\r\n            {Object.values(statusList).map((key, i) => (\r\n              <Step\r\n                key={i}\r\n                title={key.replace(/\\w\\S*/g, (w) =>\r\n                  w.replace(/^\\w/, (c) => c.toUpperCase())\r\n                )}\r\n              />\r\n            ))}\r\n          </Steps>\r\n        </div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n});\r\nconst AddDialog = React.memo(() => {\r\n  const { userDataState } = useContext(Context);\r\n  const {\r\n    AddOrder,\r\n    addDialogVisibilityState,\r\n    statusListState,\r\n    devicesListState,\r\n    genericLoaderState,\r\n  } = useContext(InstallCartContext);\r\n  const [userData] = userDataState;\r\n  const [genericLoader] = genericLoaderState;\r\n  const [\r\n    addDialogVisibility,\r\n    setAddDialogVisibility,\r\n  ] = addDialogVisibilityState;\r\n  const [statusList] = statusListState;\r\n  const [devicesList] = devicesListState;\r\n  const [addForm] = Form.useForm();\r\n  addForm.resetFields();\r\n  const dateFormat = \"MM/DD/YYYY\";\r\n  const onFinish = (values) => {\r\n    values.rosd = moment(values.rosd).format(dateFormat);\r\n    values.shipDate = moment(values.shipDate).format(dateFormat);\r\n    if (!values.recommendedBuild) {\r\n      values.recommendedBuild = false;\r\n    } else {\r\n      values.recommendedBuild = true;\r\n    }\r\n    if (!values.projectManager) {\r\n      values.projectManager = \"\";\r\n    }\r\n    values.wrd\r\n      ? (values.wrd = moment(values.wrd).format(dateFormat))\r\n      : (values.wrd = \"\");\r\n    if (!values.configurationInformation) {\r\n      values.configurationInformation = \"\";\r\n    }\r\n    if (!values.status) {\r\n      values.status = \"\";\r\n    }\r\n    if (!values.devices) {\r\n      values.devices = [];\r\n    }\r\n    values[\"owner\"] = userData.USER_NAME;\r\n    AddOrder(values);\r\n  };\r\n  return (\r\n    <Dialog\r\n      open={addDialogVisibility}\r\n      scroll=\"body\"\r\n      onClose={() => {\r\n        setAddDialogVisibility(false);\r\n      }}\r\n      style={{ zIndex: 2 }}\r\n    >\r\n      <DialogTitle id=\"simple-dialog-title\">Add new order</DialogTitle>\r\n      <DialogContent dividers className=\"addFormContainer\">\r\n        <Form\r\n          form={addForm}\r\n          name=\"dynamic_form_nest_item\"\r\n          autoComplete=\"off\"\r\n          onFinish={onFinish}\r\n        >\r\n          <div className=\"formRow\">\r\n            <div className=\"formItem\">\r\n              <span>General Order Number:</span>\r\n              <Form.Item\r\n                name=\"gon\"\r\n                noStyle\r\n                rules={[{ required: true, message: \"Please fill this field\" }]}\r\n              >\r\n                <Input type=\"number\" allowClear />\r\n              </Form.Item>\r\n            </div>\r\n            <div className=\"formItem\">\r\n              <span>Project Name:</span>\r\n              <Form.Item\r\n                name=\"projectName\"\r\n                noStyle\r\n                rules={[{ required: true, message: \"Please fill this field\" }]}\r\n              >\r\n                <Input allowClear />\r\n              </Form.Item>\r\n            </div>\r\n          </div>\r\n          <div className=\"formRow\">\r\n            <div className=\"formItem\">\r\n              <span>Ship Date:</span>\r\n              <Form.Item\r\n                name=\"shipDate\"\r\n                noStyle\r\n                rules={[{ required: true, message: \"Please fill this field\" }]}\r\n              >\r\n                <DatePicker format={dateFormat} />\r\n              </Form.Item>\r\n            </div>\r\n            <div className=\"formItem\">\r\n              <span>Requested On-Site Date:</span>\r\n              <Form.Item\r\n                noStyle\r\n                name=\"rosd\"\r\n                rules={[{ required: true, message: \"Please fill this field\" }]}\r\n              >\r\n                <DatePicker format={dateFormat} />\r\n              </Form.Item>\r\n            </div>\r\n          </div>\r\n          <div className=\"formRow\">\r\n            <div className=\"formItem\">\r\n              <span>Project Manager:</span>\r\n              <Form.Item noStyle name=\"projectManager\">\r\n                <Input allowClear />\r\n              </Form.Item>\r\n            </div>\r\n            <div className=\"formItem\">\r\n              <span>Warehouse Requested Date:</span>\r\n              <Form.Item name=\"wrd\" noStyle>\r\n                <DatePicker allowClear format={dateFormat} />\r\n              </Form.Item>\r\n            </div>\r\n          </div>\r\n          <div className=\"formRow\">\r\n            <div className=\"formItem\" style={{ width: \"100%\", marginRight: 0 }}>\r\n              <span>Device Count:</span>\r\n              <Form.List name=\"devices\">\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map((field) => (\r\n                      <Space key={field.key} align=\"baseline\">\r\n                        <Form.Item\r\n                          noStyle\r\n                          shouldUpdate={(prevValues, curValues) =>\r\n                            prevValues.devices !== curValues.devices\r\n                          }\r\n                        >\r\n                          {() => (\r\n                            <Form.Item\r\n                              {...field}\r\n                              label=\"Device\"\r\n                              name={[field.name, \"device\"]}\r\n                              fieldKey={[field.fieldKey, \"device\"]}\r\n                              rules={[\r\n                                { required: true, message: \"Missing device\" },\r\n                              ]}\r\n                            >\r\n                              <Select style={{ width: 130 }}>\r\n                                {devicesList.map((item) => (\r\n                                  <Option key={item} value={item}>\r\n                                    {item}\r\n                                  </Option>\r\n                                ))}\r\n                              </Select>\r\n                            </Form.Item>\r\n                          )}\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          {...field}\r\n                          label=\"Qty\"\r\n                          name={[field.name, \"quantity\"]}\r\n                          fieldKey={[field.fieldKey, \"quantity\"]}\r\n                          rules={[\r\n                            { required: true, message: \"Missing Quantity\" },\r\n                          ]}\r\n                        >\r\n                          <Input />\r\n                        </Form.Item>\r\n                        <MinusCircleOutlined\r\n                          onClick={() => remove(field.name)}\r\n                        />\r\n                      </Space>\r\n                    ))}\r\n                    <Form.Item noStyle>\r\n                      <Button\r\n                        type=\"dashed\"\r\n                        onClick={() => add()}\r\n                        block\r\n                        icon={<PlusOutlined />}\r\n                      >\r\n                        Add product\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </div>\r\n          </div>\r\n          <div className=\"formRow\">\r\n            <div className=\"formItem\" style={{ width: \"100%\", marginRight: 0 }}>\r\n              <span>Configuration Information:</span>\r\n              <Form.Item noStyle name=\"configurationInformation\">\r\n                <TextArea rows={3} allowClear />\r\n              </Form.Item>\r\n            </div>\r\n          </div>\r\n          <div className=\"formRow\">\r\n            <div className=\"formItem\" style={{ width: \"100%\", marginRight: 0 }}>\r\n              <span>Status:</span>\r\n              <Form.Item name=\"status\" noStyle>\r\n                <Select>\r\n                  {statusList.map((key, i) => {\r\n                    return (\r\n                      <Option key={i} value={key}>\r\n                        {key.charAt(0).toUpperCase() + key.slice(1)}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </Form.Item>\r\n            </div>\r\n          </div>\r\n          <div className=\"formRow\">\r\n            <Form.Item name=\"recommendedBuild\" valuePropName=\"checked\" noStyle>\r\n              <Checkbox defaultChecked>Want a recommended build?</Checkbox>\r\n            </Form.Item>\r\n          </div>\r\n        </Form>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <MaterialButton\r\n          autoFocus\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            setAddDialogVisibility(false);\r\n          }}\r\n        >\r\n          CANCEL\r\n        </MaterialButton>\r\n        <MaterialButton\r\n          startIcon={\r\n            genericLoader ? (\r\n              <CircularProgress size={15} color=\"inherit\" />\r\n            ) : null\r\n          }\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={addForm.submit}\r\n        >\r\n          CONFIRM\r\n        </MaterialButton>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n});\r\nconst DeleteConfirmDialog = React.memo(() => {\r\n  const {\r\n    DeleteOrder,\r\n    workingOrderState,\r\n    genericLoaderState,\r\n    deleteDialogVisibilityState,\r\n  } = useContext(InstallCartContext);\r\n  const [workingOrder, setWorkingOrder] = workingOrderState;\r\n  const [\r\n    deleteDialogVisibility,\r\n    setDeleteDialogVisibility,\r\n  ] = deleteDialogVisibilityState;\r\n  const [genericLoader] = genericLoaderState;\r\n  return (\r\n    <Dialog\r\n      open={deleteDialogVisibility}\r\n      onClose={() => {\r\n        setDeleteDialogVisibility(false);\r\n      }}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">\r\n        Are you sure to delete this item?\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText\r\n          id=\"alert-dialog-description\"\r\n          style={{ overflow: \"hidden\" }}\r\n        >\r\n          This action can't be undone.\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <MaterialButton\r\n          onClick={() => {\r\n            setDeleteDialogVisibility(false);\r\n            setWorkingOrder({});\r\n          }}\r\n          color=\"primary\"\r\n        >\r\n          Cancel\r\n        </MaterialButton>\r\n        <MaterialButton\r\n          startIcon={\r\n            genericLoader ? (\r\n              <CircularProgress size={20} color=\"inherit\" />\r\n            ) : null\r\n          }\r\n          onClick={() => {\r\n            DeleteOrder(workingOrder);\r\n          }}\r\n          color=\"primary\"\r\n          autoFocus\r\n          variant=\"contained\"\r\n        >\r\n          Ok\r\n        </MaterialButton>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n});\r\nconst EditDialog = React.memo(() => {\r\n  const {\r\n    EditOrder,\r\n    editDialogVisibilityState,\r\n    statusListState,\r\n    workingOrderState,\r\n    devicesListState,\r\n  } = useContext(InstallCartContext);\r\n  const [devicesList] = devicesListState;\r\n  const [workingOrder, setWorkingOrder] = workingOrderState;\r\n  const [editForm] = Form.useForm();\r\n  editForm.resetFields();\r\n  const dateFormat = \"MM/DD/YYYY\";\r\n  const [statusList] = statusListState;\r\n  const [\r\n    editDialogVisibility,\r\n    setEditDialogVisibility,\r\n  ] = editDialogVisibilityState;\r\n  editForm.setFieldsValue({\r\n    gon: parseInt(workingOrder.GON),\r\n    projectName: workingOrder.PROJECT_NAME,\r\n    shipDate: workingOrder.SHIP_DATE\r\n      ? moment(workingOrder.SHIP_DATE, dateFormat)\r\n      : null,\r\n    rosd: workingOrder.ROSD ? moment(workingOrder.ROSD, dateFormat) : null,\r\n    projectManager: workingOrder.PROJECT_MANAGER,\r\n    wrd: workingOrder.WRD ? moment(workingOrder.WRD, dateFormat) : null,\r\n    configurationInformation: workingOrder.CONFIGURATION_INFORMATION,\r\n    status: workingOrder.STATUS,\r\n  });\r\n  const onFinish = (values) => {\r\n    if (!values.rosd) {\r\n      values.rosd = moment(values.rosd).format(dateFormat);\r\n    } else {\r\n      values.rosd = \"\";\r\n    }\r\n    if (!values.shipDate) {\r\n      values.shipDate = moment(values.shipDate).format(dateFormat);\r\n    } else {\r\n      values.shipDate = \"\";\r\n    }\r\n    if (!values.recommendedBuild) {\r\n      values.recommendedBuild = false;\r\n    } else {\r\n      values.recommendedBuild = true;\r\n    }\r\n    if (!values.projectManager) {\r\n      values.projectManager = \"\";\r\n    }\r\n    values.wrd\r\n      ? (values.wrd = moment(values.wrd).format(dateFormat))\r\n      : (values.wrd = \"\");\r\n    if (!values.configurationInformation) {\r\n      values.configurationInformation = \"\";\r\n    }\r\n    if (!values.status) {\r\n      values.status = \"\";\r\n    }\r\n    if (!values.devices) {\r\n      values.devices = [];\r\n    }\r\n    values[\"id\"] = workingOrder.ID;\r\n    EditOrder(values);\r\n  };\r\n  return (\r\n    <Dialog\r\n      open={editDialogVisibility}\r\n      scroll=\"body\"\r\n      onClose={() => {\r\n        setEditDialogVisibility(false);\r\n        setWorkingOrder({});\r\n      }}\r\n      style={{ zIndex: 2 }}\r\n    >\r\n      <DialogTitle>Edit Item</DialogTitle>\r\n      <DialogContent>\r\n        <Form form={editForm} onFinish={onFinish}>\r\n          <div className=\"formRow\">\r\n            <div className=\"formItem\">\r\n              <span>General Order Number:</span>\r\n              <Form.Item name=\"gon\" noStyle>\r\n                <Input type=\"number\" allowClear />\r\n              </Form.Item>\r\n            </div>\r\n            <div className=\"formItem\">\r\n              <span>Project Name:</span>\r\n              <Form.Item name=\"projectName\" noStyle>\r\n                <Input allowClear />\r\n              </Form.Item>\r\n            </div>\r\n          </div>\r\n          <div className=\"formRow\">\r\n            <div className=\"formItem\">\r\n              <span>Ship Date:</span>\r\n              <Form.Item name=\"shipDate\" noStyle>\r\n                <DatePicker allowClear format={dateFormat} />\r\n              </Form.Item>\r\n            </div>\r\n            <div className=\"formItem\">\r\n              <span>Requested On-Site Date:</span>\r\n              <Form.Item name=\"rosd\" noStyle>\r\n                <DatePicker allowClear format={dateFormat} />\r\n              </Form.Item>\r\n            </div>\r\n          </div>\r\n          <div className=\"formRow\">\r\n            <div className=\"formItem\">\r\n              <span>Project Manager:</span>\r\n              <Form.Item name=\"projectManager\" noStyle>\r\n                <Input allowClear />\r\n              </Form.Item>\r\n            </div>\r\n            <div className=\"formItem\">\r\n              <span>Warehouse Requested Date:</span>\r\n              <Form.Item name=\"wrd\" noStyle>\r\n                <DatePicker allowClear format={dateFormat} />\r\n              </Form.Item>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"formRow\">\r\n            <div className=\"formItem\" style={{ width: \"100%\", marginRight: 0 }}>\r\n              {workingOrder.DEVICE_COUNT === null ||\r\n              workingOrder.DEVICE_COUNT === \"\" ||\r\n              workingOrder.DEVICE_COUNT === undefined ||\r\n              !workingOrder.DEVICE_COUNT ||\r\n              workingOrder.DEVICE_COUNT === \"[]\" ? null : (\r\n                <Form.List name=\"devices2\">\r\n                  {() => (\r\n                    <>\r\n                      {JSON.parse(workingOrder.DEVICE_COUNT).map((key, i) => (\r\n                        <Space key={i}>\r\n                          <Form.Item\r\n                            label=\"Device\"\r\n                            name=\"device\"\r\n                            fieldKey={[i, \"device\"]}\r\n                          >\r\n                            <Select\r\n                              style={{ width: 130 }}\r\n                              allowClear\r\n                              defaultValue={key.device}\r\n                            >\r\n                              {devicesList.map((item) => (\r\n                                <Option key={item} value={item}>\r\n                                  {item}\r\n                                </Option>\r\n                              ))}\r\n                            </Select>\r\n                          </Form.Item>\r\n                          <Form.Item\r\n                            initialValue={key.qty}\r\n                            label=\"Qty\"\r\n                            name=\"quantity\"\r\n                          >\r\n                            <Input\r\n                              type=\"number\"\r\n                              allowClear\r\n                              defaultValue={key.quantity}\r\n                            />\r\n                          </Form.Item>\r\n                        </Space>\r\n                      ))}\r\n                    </>\r\n                  )}\r\n                </Form.List>\r\n              )}\r\n              <Form.List name=\"devices\">\r\n                {(fields, { add, remove }) => (\r\n                  <>\r\n                    {fields.map((field) => (\r\n                      <Space key={field.key} align=\"baseline\">\r\n                        <Form.Item\r\n                          noStyle\r\n                          shouldUpdate={(prevValues, curValues) =>\r\n                            prevValues.devices !== curValues.devices\r\n                          }\r\n                        >\r\n                          {() => (\r\n                            <Form.Item\r\n                              {...field}\r\n                              label=\"Device\"\r\n                              name={[field.name, \"device\"]}\r\n                              fieldKey={[field.fieldKey, \"device\"]}\r\n                              rules={[\r\n                                { required: true, message: \"Missing device\" },\r\n                              ]}\r\n                            >\r\n                              <Select style={{ width: 130 }}>\r\n                                {devicesList.map((item) => (\r\n                                  <Option key={item} value={item}>\r\n                                    {item}\r\n                                  </Option>\r\n                                ))}\r\n                              </Select>\r\n                            </Form.Item>\r\n                          )}\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                          {...field}\r\n                          label=\"Qty\"\r\n                          name={[field.name, \"quantity\"]}\r\n                          fieldKey={[field.fieldKey, \"quantity\"]}\r\n                          rules={[\r\n                            { required: true, message: \"Missing Quantity\" },\r\n                          ]}\r\n                        >\r\n                          <Input />\r\n                        </Form.Item>\r\n                        <MinusCircleOutlined\r\n                          onClick={() => remove(field.name)}\r\n                        />\r\n                      </Space>\r\n                    ))}\r\n                    <Form.Item noStyle>\r\n                      <Button\r\n                        type=\"dashed\"\r\n                        onClick={() => add()}\r\n                        block\r\n                        icon={<PlusOutlined />}\r\n                      >\r\n                        Add product\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </>\r\n                )}\r\n              </Form.List>\r\n            </div>\r\n          </div> */}\r\n\r\n          <div className=\"formRow\">\r\n            <div className=\"formItem\" style={{ width: \"100%\", marginRight: 0 }}>\r\n              <span>Configuration information:</span>\r\n              <Form.Item name=\"configurationInformation\" noStyle>\r\n                <TextArea rows={3} allowClear />\r\n              </Form.Item>\r\n            </div>\r\n          </div>\r\n          <div className=\"formRow\">\r\n            <div className=\"formItem\" style={{ marginRight: 0, width: \"100%\" }}>\r\n              <span>Status:</span>\r\n              <Form.Item name=\"status\" noStyle>\r\n                <Select>\r\n                  {statusList.map((key, i) => {\r\n                    return (\r\n                      <Option key={i} value={key}>\r\n                        {key.charAt(0).toUpperCase() + key.slice(1)}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </Form.Item>\r\n            </div>\r\n          </div>\r\n          <div className=\"formRow\">\r\n            <Form.Item name=\"recommendedBuild\" valuePropName=\"checked\" noStyle>\r\n              <Checkbox defaultChecked>Want a recommended build?</Checkbox>\r\n            </Form.Item>\r\n          </div>\r\n        </Form>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <MaterialButton\r\n          variant=\"contained\"\r\n          color=\"default\"\r\n          onClick={() => {\r\n            setEditDialogVisibility(false);\r\n            setWorkingOrder({});\r\n          }}\r\n        >\r\n          Cancel\r\n        </MaterialButton>\r\n        <MaterialButton\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            editForm.submit();\r\n          }}\r\n        >\r\n          Update\r\n        </MaterialButton>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n});\r\nexport default Orders;\r\n","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\ItSupportContext.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\tableIcons.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\inventoryColumns.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\screens\\Miscellaneous.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\index.js",["134"],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\addForms.js",["135","136"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { ItSupportContext } from \"../resources/ItSupportContext\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { Checkbox } from \"@material-ui/core\";\r\nconst AddDesktopsForm = React.memo(() => {\r\n  const { inventoryFormDataState } = useContext(ItSupportContext);\r\n  const [inventoryFormData, setInventoryFormData] = inventoryFormDataState;\r\n  useEffect(() => {\r\n    console.log(inventoryFormData);\r\n  }, [inventoryFormData]);\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        height: \"100%\",\r\n      }}\r\n    >\r\n      <div style={{ display: \"flex\", marginBottom: \"1em\" }}>\r\n        <TextField\r\n          size=\"small\"\r\n          label=\"Brand\"\r\n          variant=\"outlined\"\r\n          style={{ width: \"100%\", marginRight: \"1em\" }}\r\n          select\r\n          name=\"brand\"\r\n          onChange={(e) => console.log(e.target.name)}\r\n        >\r\n          <MenuItem value=\"dell\">DELL</MenuItem>\r\n          <MenuItem value=\"hp\">HP</MenuItem>\r\n          <MenuItem value=\"lenovo\">Lenovo</MenuItem>\r\n          <MenuItem value=\"apple\">Apple</MenuItem>\r\n          <MenuItem value=\"microsoft\">Microsoft</MenuItem>\r\n          <MenuItem value=\"other\">Other</MenuItem>\r\n        </TextField>\r\n        <TextField\r\n          size=\"small\"\r\n          label=\"Model\"\r\n          variant=\"outlined\"\r\n          style={{ width: \"100%\" }}\r\n        />\r\n      </div>\r\n\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Service Tag\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\", marginBottom: \"1em\" }}\r\n        multiline\r\n        rowsMax={6}\r\n        rows={4}\r\n      />\r\n      <div style={{ display: \"flex\", marginBottom: \"1em\" }}>\r\n        <TextField\r\n          size=\"small\"\r\n          label=\"Location\"\r\n          variant=\"outlined\"\r\n          style={{ width: \"100%\", marginRight: \"1em\" }}\r\n        />\r\n        <TextField\r\n          size=\"small\"\r\n          label=\"Area\"\r\n          variant=\"outlined\"\r\n          style={{ width: \"100%\" }}\r\n        />\r\n      </div>\r\n      <div style={{ display: \"flex\", marginBottom: \"1em\" }}>\r\n        <TextField\r\n          size=\"small\"\r\n          label=\"OS\"\r\n          variant=\"outlined\"\r\n          style={{ width: \"100%\", marginRight: \"1em\" }}\r\n          select\r\n        >\r\n          <MenuItem value=\"windows 10\">Windows 10</MenuItem>\r\n          <MenuItem value=\"windows 7\">Windows 7</MenuItem>\r\n          <MenuItem value=\"windows xp\">Windows XP</MenuItem>\r\n          <MenuItem value=\"linux/ubuntu\">Linux / Ubuntu</MenuItem>\r\n          <MenuItem value=\"other\">Other</MenuItem>\r\n        </TextField>\r\n        <TextField\r\n          size=\"small\"\r\n          label=\"Specs\"\r\n          variant=\"outlined\"\r\n          style={{ width: \"100%\" }}\r\n        />\r\n      </div>\r\n      <div style={{ display: \"flex\", marginBottom: \"1em\" }}>\r\n        <TextField\r\n          size=\"small\"\r\n          label=\"Hostname\"\r\n          variant=\"outlined\"\r\n          style={{ width: \"100%\", marginRight: \"1em\" }}\r\n        >\r\n          <Checkbox />\r\n        </TextField>\r\n        <TextField\r\n          size=\"small\"\r\n          label=\"Username\"\r\n          variant=\"outlined\"\r\n          style={{ width: \"100%\" }}\r\n        />\r\n      </div>\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Country\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n        select\r\n      >\r\n        <MenuItem value=\"united states\">United States</MenuItem>\r\n        <MenuItem value=\"mexico\">Mexico</MenuItem>\r\n      </TextField>\r\n    </div>\r\n  );\r\n});\r\nconst AddLaptopsForm = React.memo(() => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        height: \"100%\",\r\n        justifyContent: \"space-between\",\r\n      }}\r\n    >\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Brand\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Model\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Service Tag\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n        multiline\r\n        rowsMax={6}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"SSO\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Username\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Department\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"OS\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Specs\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Hostname\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Country\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </div>\r\n  );\r\n});\r\nconst AddMobilesForm = React.memo(() => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        height: \"100%\",\r\n        justifyContent: \"space-between\",\r\n      }}\r\n    >\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Brand\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Model\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"IMEI\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n        multiline\r\n        rowsMax={6}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"SSO\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Username\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Department\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"OS\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Specs\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Color\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Specs\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Tel Number\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </div>\r\n  );\r\n});\r\nconst AddLabelPrintersForm = React.memo(() => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        height: \"100%\",\r\n        justifyContent: \"space-between\",\r\n      }}\r\n    >\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Brand\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Model\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"IMEI\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n        multiline\r\n        rowsMax={6}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"SSO\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Username\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Department\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"OS\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Specs\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Color\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Specs\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n      <TextField\r\n        size=\"small\"\r\n        label=\"Tel Number\"\r\n        variant=\"outlined\"\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </div>\r\n  );\r\n});\r\nconst AddLaserPrintersForm = React.memo(() => {\r\n  return <>addLaserPrintersForm</>;\r\n});\r\nconst AddReservedIpsForm = React.memo(() => {\r\n  return <>addReservedIpsForm</>;\r\n});\r\n\r\nexport const index = {\r\n  desktops: <AddDesktopsForm />,\r\n  laptops: <AddLaptopsForm />,\r\n  mobiles: <AddMobilesForm />,\r\n  laserPrinters: <AddLabelPrintersForm />,\r\n  labelPrinters: <AddLaserPrintersForm />,\r\n  reservedIps: <AddReservedIpsForm />,\r\n};\r\n","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\desktopsTable.js",["137","138","139","140"],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\laptopsTable.js",["141","142","143","144","145","146","147"],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\laserPrintersTable.js",["148","149","150","151","152","153","154"],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\mobilesTable.js",["155","156","157","158","159","160","161"],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\reservedIpsTable.js",["162","163","164","165","166","167","168"],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\sectionTitles.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\screens\\Inventory.js",["169","170"],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\labelPrintersTable.js",["171","172","173","174","175","176","177","178"],{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":39,"column":57,"nodeType":"185","messageId":"186","endLine":39,"endColumn":63},{"ruleId":"187","severity":1,"message":"188","line":824,"column":10,"nodeType":"189","messageId":"190","endLine":824,"endColumn":21},{"ruleId":"187","severity":1,"message":"191","line":33,"column":12,"nodeType":"189","messageId":"190","endLine":33,"endColumn":27},{"ruleId":"187","severity":1,"message":"192","line":1,"column":17,"nodeType":"189","messageId":"190","endLine":1,"endColumn":25},{"ruleId":"187","severity":1,"message":"193","line":8,"column":29,"nodeType":"189","messageId":"190","endLine":8,"endColumn":49},{"ruleId":"187","severity":1,"message":"194","line":33,"column":5,"nodeType":"189","messageId":"190","endLine":33,"endColumn":24},{"ruleId":"187","severity":1,"message":"195","line":36,"column":10,"nodeType":"189","messageId":"190","endLine":36,"endColumn":23},{"ruleId":"187","severity":1,"message":"196","line":39,"column":9,"nodeType":"189","messageId":"190","endLine":39,"endColumn":18},{"ruleId":"197","severity":1,"message":"198","line":58,"column":7,"nodeType":"199","endLine":58,"endColumn":17},{"ruleId":"187","severity":1,"message":"194","line":74,"column":5,"nodeType":"189","messageId":"190","endLine":74,"endColumn":24},{"ruleId":"187","severity":1,"message":"195","line":77,"column":10,"nodeType":"189","messageId":"190","endLine":77,"endColumn":23},{"ruleId":"187","severity":1,"message":"200","line":78,"column":10,"nodeType":"189","messageId":"190","endLine":78,"endColumn":22},{"ruleId":"187","severity":1,"message":"201","line":78,"column":24,"nodeType":"189","messageId":"190","endLine":78,"endColumn":39},{"ruleId":"187","severity":1,"message":"196","line":81,"column":9,"nodeType":"189","messageId":"190","endLine":81,"endColumn":18},{"ruleId":"197","severity":1,"message":"202","line":102,"column":6,"nodeType":"203","endLine":102,"endColumn":17,"suggestions":"204"},{"ruleId":"197","severity":1,"message":"205","line":102,"column":7,"nodeType":"199","endLine":102,"endColumn":16},{"ruleId":"187","severity":1,"message":"194","line":33,"column":5,"nodeType":"189","messageId":"190","endLine":33,"endColumn":24},{"ruleId":"187","severity":1,"message":"195","line":36,"column":10,"nodeType":"189","messageId":"190","endLine":36,"endColumn":23},{"ruleId":"187","severity":1,"message":"200","line":37,"column":10,"nodeType":"189","messageId":"190","endLine":37,"endColumn":22},{"ruleId":"187","severity":1,"message":"201","line":37,"column":24,"nodeType":"189","messageId":"190","endLine":37,"endColumn":39},{"ruleId":"187","severity":1,"message":"196","line":40,"column":9,"nodeType":"189","messageId":"190","endLine":40,"endColumn":18},{"ruleId":"197","severity":1,"message":"202","line":61,"column":6,"nodeType":"203","endLine":61,"endColumn":23,"suggestions":"206"},{"ruleId":"197","severity":1,"message":"207","line":61,"column":7,"nodeType":"199","endLine":61,"endColumn":22},{"ruleId":"187","severity":1,"message":"194","line":73,"column":5,"nodeType":"189","messageId":"190","endLine":73,"endColumn":24},{"ruleId":"187","severity":1,"message":"195","line":76,"column":10,"nodeType":"189","messageId":"190","endLine":76,"endColumn":23},{"ruleId":"187","severity":1,"message":"200","line":77,"column":10,"nodeType":"189","messageId":"190","endLine":77,"endColumn":22},{"ruleId":"187","severity":1,"message":"201","line":77,"column":24,"nodeType":"189","messageId":"190","endLine":77,"endColumn":39},{"ruleId":"187","severity":1,"message":"196","line":80,"column":9,"nodeType":"189","messageId":"190","endLine":80,"endColumn":18},{"ruleId":"197","severity":1,"message":"202","line":101,"column":6,"nodeType":"203","endLine":101,"endColumn":17,"suggestions":"208"},{"ruleId":"197","severity":1,"message":"209","line":101,"column":7,"nodeType":"199","endLine":101,"endColumn":16},{"ruleId":"187","severity":1,"message":"194","line":33,"column":5,"nodeType":"189","messageId":"190","endLine":33,"endColumn":24},{"ruleId":"187","severity":1,"message":"195","line":36,"column":10,"nodeType":"189","messageId":"190","endLine":36,"endColumn":23},{"ruleId":"187","severity":1,"message":"200","line":37,"column":10,"nodeType":"189","messageId":"190","endLine":37,"endColumn":22},{"ruleId":"187","severity":1,"message":"201","line":37,"column":24,"nodeType":"189","messageId":"190","endLine":37,"endColumn":39},{"ruleId":"187","severity":1,"message":"196","line":40,"column":9,"nodeType":"189","messageId":"190","endLine":40,"endColumn":18},{"ruleId":"197","severity":1,"message":"202","line":61,"column":6,"nodeType":"203","endLine":61,"endColumn":13,"suggestions":"210"},{"ruleId":"197","severity":1,"message":"211","line":61,"column":7,"nodeType":"199","endLine":61,"endColumn":12},{"ruleId":"187","severity":1,"message":"212","line":6,"column":8,"nodeType":"189","messageId":"190","endLine":6,"endColumn":23},{"ruleId":"213","severity":1,"message":"214","line":166,"column":58,"nodeType":"215","endLine":166,"endColumn":73},{"ruleId":"187","severity":1,"message":"216","line":30,"column":7,"nodeType":"189","messageId":"190","endLine":30,"endColumn":15},{"ruleId":"187","severity":1,"message":"194","line":72,"column":5,"nodeType":"189","messageId":"190","endLine":72,"endColumn":24},{"ruleId":"187","severity":1,"message":"195","line":75,"column":10,"nodeType":"189","messageId":"190","endLine":75,"endColumn":23},{"ruleId":"187","severity":1,"message":"200","line":76,"column":10,"nodeType":"189","messageId":"190","endLine":76,"endColumn":22},{"ruleId":"187","severity":1,"message":"201","line":76,"column":24,"nodeType":"189","messageId":"190","endLine":76,"endColumn":39},{"ruleId":"187","severity":1,"message":"196","line":79,"column":9,"nodeType":"189","messageId":"190","endLine":79,"endColumn":18},{"ruleId":"197","severity":1,"message":"202","line":100,"column":6,"nodeType":"203","endLine":100,"endColumn":23,"suggestions":"217"},{"ruleId":"197","severity":1,"message":"218","line":100,"column":7,"nodeType":"199","endLine":100,"endColumn":22},"no-native-reassign",["219"],"no-negated-in-lhs",["220"],"no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","no-unused-vars","'devicesList' is assigned a value but never used.","Identifier","unusedVar","'setMainProgress' is assigned a value but never used.","'useState' is defined but never used.","'setInventoryFormData' is assigned a value but never used.","'addDrawerVisibility' is assigned a value but never used.","'genericLoader' is assigned a value but never used.","'heightdiv' is assigned a value but never used.","react-hooks/exhaustive-deps","The \"desktops\" literal is not a valid dependency because it never changes. You can safely remove it.","Literal","'tableColumns' is assigned a value but never used.","'setTableColumns' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["221"],"The \"laptops\" literal is not a valid dependency because it never changes. You can safely remove it.",["222"],"The \"laserPrinters\" literal is not a valid dependency because it never changes. You can safely remove it.",["223"],"The \"mobiles\" literal is not a valid dependency because it never changes. You can safely remove it.",["224"],"The \"ips\" literal is not a valid dependency because it never changes. You can safely remove it.","'AddToPhotosIcon' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'PrintPDF' is assigned a value but never used.",["225"],"The \"labelPrinters\" literal is not a valid dependency because it never changes. You can safely remove it.","no-global-assign","no-unsafe-negation",{"desc":"226","fix":"227"},{"desc":"226","fix":"228"},{"desc":"226","fix":"229"},{"desc":"226","fix":"230"},{"desc":"226","fix":"231"},"Update the dependencies array to be: [fetchData]",{"range":"232","text":"233"},{"range":"234","text":"233"},{"range":"235","text":"233"},{"range":"236","text":"233"},{"range":"237","text":"233"},[3618,3629],"[fetchData]",[2179,2196],[3623,3634],[2167,2174],[3576,3593]]