[{"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\index.js":"1","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\App.js":"2","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_resources\\serverRoutes.js":"3","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_resources\\useLocalStorage.js":"4","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\Main.js":"5","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_context\\MainContext.js":"6","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\login\\index.js":"7","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\index.js":"8","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\CartsChart.js":"9","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\NavBar.js":"10","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\OrdersChart.js":"11","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\OrdersTotalChart.js":"12","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\resources\\InstallCartContext.js":"13","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Dashboard.js":"14","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Inventory.js":"15","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Orders.js":"16","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\addForms.js":"17","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\NavBar.js":"18","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\auditItems.js":"19","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\commentsForm.js":"20","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\qatest\\screens\\Ops.js":"21","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\qatest\\index.js":"22","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\desktopsTable.js":"23","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\tableIcons.js":"24","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\ItSupportContext.js":"25","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\sectionTitles.js":"26","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\screens\\Inventory.js":"27","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\screens\\Miscellaneous.js":"28","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\inventoryColumns.js":"29","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\index.js":"30","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\reservedIpsTable.js":"31","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\mobilesTable.js":"32","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\laserPrintersTable.js":"33","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\laptopsTable.js":"34","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\labelPrintersTable.js":"35"},{"size":360,"mtime":1614638385520,"results":"36","hashOfConfig":"37"},{"size":3850,"mtime":1611687227400,"results":"38","hashOfConfig":"37"},{"size":131,"mtime":1611687227409,"results":"39","hashOfConfig":"37"},{"size":1289,"mtime":1611605962545,"results":"40","hashOfConfig":"37"},{"size":12098,"mtime":1615829655605,"results":"41","hashOfConfig":"37"},{"size":75,"mtime":1611605962476,"results":"42","hashOfConfig":"37"},{"size":4943,"mtime":1611687227407,"results":"43","hashOfConfig":"37"},{"size":10965,"mtime":1615829655662,"results":"44","hashOfConfig":"37"},{"size":2371,"mtime":1615829655630,"results":"45","hashOfConfig":"37"},{"size":2776,"mtime":1613598043544,"results":"46","hashOfConfig":"37"},{"size":4128,"mtime":1611870362900,"results":"47","hashOfConfig":"37"},{"size":2190,"mtime":1612301560925,"results":"48","hashOfConfig":"37"},{"size":86,"mtime":1611605962460,"results":"49","hashOfConfig":"37"},{"size":7402,"mtime":1615829655675,"results":"50","hashOfConfig":"37"},{"size":9471,"mtime":1615829655695,"results":"51","hashOfConfig":"37"},{"size":43070,"mtime":1616622269054,"results":"52","hashOfConfig":"37"},{"size":14224,"mtime":1616779482354,"results":"53","hashOfConfig":"37"},{"size":1959,"mtime":1613598043564,"results":"54","hashOfConfig":"37"},{"size":22668,"mtime":1616099377518,"results":"55","hashOfConfig":"37"},{"size":1468,"mtime":1616698211879,"results":"56","hashOfConfig":"37"},{"size":106,"mtime":1615829655741,"results":"57","hashOfConfig":"37"},{"size":388,"mtime":1615829655731,"results":"58","hashOfConfig":"37"},{"size":14595,"mtime":1616698127488,"results":"59","hashOfConfig":"37"},{"size":2307,"mtime":1611605962476,"results":"60","hashOfConfig":"37"},{"size":84,"mtime":1612464285908,"results":"61","hashOfConfig":"37"},{"size":215,"mtime":1614801674308,"results":"62","hashOfConfig":"37"},{"size":12287,"mtime":1616780852625,"results":"63","hashOfConfig":"37"},{"size":104,"mtime":1611605962476,"results":"64","hashOfConfig":"37"},{"size":3240,"mtime":1613598043568,"results":"65","hashOfConfig":"37"},{"size":6118,"mtime":1616698104755,"results":"66","hashOfConfig":"37"},{"size":4942,"mtime":1615919044084,"results":"67","hashOfConfig":"37"},{"size":7127,"mtime":1615918201342,"results":"68","hashOfConfig":"37"},{"size":5305,"mtime":1615918431072,"results":"69","hashOfConfig":"37"},{"size":16292,"mtime":1616781749577,"results":"70","hashOfConfig":"37"},{"size":5302,"mtime":1615918490803,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"202g0q",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"74"},"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\index.js",[],["152","153"],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\App.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_resources\\serverRoutes.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_resources\\useLocalStorage.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\Main.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_context\\MainContext.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\login\\index.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\index.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\CartsChart.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\NavBar.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\OrdersChart.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\OrdersTotalChart.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\resources\\InstallCartContext.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Dashboard.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Inventory.js",["154","155","156","157","158","159"],"import React, { useContext, useCallback, useState, useEffect } from \"react\";\r\nimport { Menu, Dropdown } from \"antd\";\r\nimport { InstallCartContext } from \"../resources/InstallCartContext\";\r\nimport useLocalStorage from \"../../../_resources/useLocalStorage\";\r\nimport MaterialTable from \"material-table\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport \"../styles/inventory.css\";\r\nimport { tableIcons } from \"../../itsupport/resources/tableIcons\";\r\nimport moment from \"moment\";\r\nimport { ExclamationCircleTwoTone } from \"@ant-design/icons\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport FlagIcon from \"@material-ui/icons/Flag\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nconst Inventory = React.memo(() => {\r\n  const { completeOrdersState, cartsState, insertsState } = useContext(\r\n    InstallCartContext\r\n  );\r\n  const [completeOrders] = completeOrdersState;\r\n  const [carts] = cartsState;\r\n  const [inserts] = insertsState;\r\n  const [tableData, setTableData] = useState([]);\r\n  const [tableColumns, setTableColumns] = useState([]);\r\n  const [height, setHeight] = useState(null);\r\n  const heightdiv = useCallback((node) => {\r\n    if (node !== null) {\r\n      setHeight(node.getBoundingClientRect().height);\r\n    }\r\n  }, []);\r\n  const [ic_inventory_section, set_ic_inventory_section] = useLocalStorage(\r\n    \"ic_inventory_section\",\r\n    \"orders\"\r\n  );\r\n  const RetroMissing = () => {\r\n    return (\r\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <ExclamationCircleTwoTone\r\n          twoToneColor=\"#faca0f\"\r\n          style={{ fontSize: \"15px\", marginRight: \"8px\" }}\r\n        />\r\n        <span style={{ fontSize: \"0.8em\" }}>Missing</span>\r\n      </div>\r\n    );\r\n  };\r\n  const ordersColumns = [\r\n    // {\r\n    //   title: \"ID\",\r\n    //   field: \"ID\",\r\n    // },\r\n    {\r\n      title: \"FW LOB\",\r\n      field: \"FW_LOB\",\r\n    },\r\n    {\r\n      title: \"FW SLOT\",\r\n      field: \"FW_SLOT\",\r\n    },\r\n    {\r\n      title: \"MONTH\",\r\n      field: \"MONTH\",\r\n    },\r\n    {\r\n      title: \"DEVICE COUNT\",\r\n      field: \"DEVICE_COUNT\",\r\n      render: (rowData) =>\r\n        rowData.DEVICE_COUNT ? rowData.DEVICE_COUNT : <RetroMissing />,\r\n    },\r\n    {\r\n      title: \"START DATE\",\r\n      field: \"START_DATE\",\r\n      render: (rowData) =>\r\n        rowData.START_DATE ? (\r\n          moment(rowData.START_DATE.date).format(\"MM/DD/YYYY\")\r\n        ) : (\r\n          <RetroMissing />\r\n        ),\r\n    },\r\n    {\r\n      title: \"SHIP DATE\",\r\n      field: \"SHIP_DATE\",\r\n      render: (rowData) =>\r\n        rowData.SHIP_DATE ? (\r\n          moment(rowData.SHIP_DATE.date).format(\"MM/DD/YYYY\")\r\n        ) : (\r\n          <RetroMissing />\r\n        ),\r\n    },\r\n    {\r\n      title: \"ROSD\",\r\n      field: \"ROSD\",\r\n      render: (rowData) =>\r\n        rowData.ROSD ? (\r\n          moment(rowData.ROSD.date).format(\"MM/DD/YYYY\")\r\n        ) : (\r\n          <RetroMissing />\r\n        ),\r\n    },\r\n    {\r\n      title: \"CART RETURN\",\r\n      field: \"CART_RETURN\",\r\n      render: (rowData) =>\r\n        rowData.CART_RETURN ? (\r\n          moment(rowData.CART_RETURN.date).format(\"MM/DD/YYYY\")\r\n        ) : (\r\n          <RetroMissing />\r\n        ),\r\n    },\r\n    {\r\n      title: \"GON\",\r\n      field: \"GON\",\r\n      render: (rowData) => (rowData.GON === 0 ? \"Missing\" : rowData.GON),\r\n    },\r\n    {\r\n      title: \"PID\",\r\n      field: \"PID\",\r\n      render: (rowData) => (rowData.PID ? rowData.PID : <RetroMissing />),\r\n    },\r\n    {\r\n      title: \"PROJECT DESCRIPTION\",\r\n      field: \"PROJECT_DESCRIPTION\",\r\n    },\r\n    {\r\n      title: \"STATUS\",\r\n      field: \"STATUS\",\r\n      render: (rowData) => (\r\n        <Chip\r\n          label={\r\n            rowData.STATUS.charAt(0).toUpperCase() + rowData.STATUS.slice(1)\r\n          }\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      title: \"ESTIMATED CART QTY\",\r\n      field: \"ESTIMATED_CART_QTY\",\r\n      render: (rowData) => rowData.ESTIMATED_CART_QTY.toFixed(2),\r\n    },\r\n    {\r\n      title: \"PACKAGE\",\r\n      field: \"PACKAGE\",\r\n    },\r\n    {\r\n      title: \"FLAGGED ON CONFIG APP\",\r\n      field: \"FLAGGED_ON_CONFIG_APP\",\r\n      render: (rowData) =>\r\n        Boolean(rowData.FLAGGED_ON_CONFIG_APP) ? <FlagIcon /> : null,\r\n    },\r\n    {\r\n      title: \"NTP SUBMITTED\",\r\n      field: \"NTP_SUBMITTED\",\r\n      render: (rowData) =>\r\n        Boolean(rowData.NTP_SUBMITTED) ? <CheckIcon /> : null,\r\n    },\r\n    {\r\n      title: \"PROJECT MANAGER CONTACT\",\r\n      field: \"PROJECT_MANAGER_CONTACT\",\r\n      render: (rowData) =>\r\n        rowData.PROJECT_MANAGER_CONTACT ? (\r\n          rowData.PROJECT_MANAGER_CONTACT\r\n        ) : (\r\n          <RetroMissing />\r\n        ),\r\n    },\r\n    {\r\n      title: \"FE\",\r\n      field: \"FE\",\r\n      render: (rowData) => (rowData.FE ? rowData.FE : <RetroMissing />),\r\n    },\r\n    {\r\n      title: \"OWNER\",\r\n      field: \"OWNER\",\r\n      render: (rowData) => JSON.parse(rowData.OWNER).NAME,\r\n    },\r\n    {\r\n      title: \"CONFIGURATION INFORMATION\",\r\n      field: \"CONFIGURATION_INFORMATION\",\r\n      render: (rowData) =>\r\n        rowData.CONFIGURATION_INFORMATION ? (\r\n          `${rowData.CONFIGURATION_INFORMATION.substring(0, 10)}...`\r\n        ) : (\r\n          <RetroMissing />\r\n        ),\r\n    },\r\n    {\r\n      title: \"CREATED DATE\",\r\n      field: \"CREATED_DATE\",\r\n      render: (rowData) =>\r\n        rowData.CREATED_DATE ? (\r\n          moment(rowData.CREATED_DATE.date).format(\"MM/DD/YYYY\")\r\n        ) : (\r\n          <RetroMissing />\r\n        ),\r\n    },\r\n  ];\r\n  const cartsColumns = [\r\n    {\r\n      title: \"ID\",\r\n      field: \"ID\",\r\n    },\r\n    {\r\n      title: \"WCPN\",\r\n      field: \"WILLSON_CASE_PN\",\r\n    },\r\n    {\r\n      title: \"STYLE\",\r\n      field: \"STYLE\",\r\n    },\r\n    {\r\n      title: \"SERIAL\",\r\n      field: \"SERIAL\",\r\n    },\r\n    {\r\n      title: \"PROJECT NAME\",\r\n      field: \"PROJECT_NAME\",\r\n    },\r\n    {\r\n      title: \"ASSIGNED ORDER\",\r\n      field: \"ASSIGNED_ORDER\",\r\n    },\r\n    // {\r\n    //   title: \"RESERVED DATE\",\r\n    //   field: \"RESERVED_DATE\",\r\n    // },\r\n    // {\r\n    //   title: \"EXPECTED RETURN\",\r\n    //   field: \"EXPECTED_RETURN\",\r\n    // },\r\n    {\r\n      title: \"NOTES\",\r\n      field: \"NOTES\",\r\n    },\r\n  ];\r\n  const insertsColumns = [\r\n    {\r\n      title: \"ID\",\r\n      field: \"ID\",\r\n    },\r\n    {\r\n      title: \"MODEL\",\r\n      field: \"MODEL\",\r\n    },\r\n    {\r\n      title: \"NAME\",\r\n      field: \"NAME\",\r\n    },\r\n    {\r\n      title: \"TOTAL\",\r\n      field: \"TOTAL\",\r\n    },\r\n    {\r\n      title: \"GOOD STOCK\",\r\n      field: \"GOOD_STOCK\",\r\n    },\r\n    {\r\n      title: \"RESERVED\",\r\n      field: \"RESERVED\",\r\n    },\r\n    {\r\n      title: \"IN USE\",\r\n      field: \"IN_USE\",\r\n    },\r\n    {\r\n      title: \"SCRAPPED\",\r\n      field: \"SCRAPPED\",\r\n    },\r\n  ];\r\n  useEffect(() => {\r\n    if (completeOrders.length !== 0 && carts !== 0 && inserts !== 0) {\r\n      switch (ic_inventory_section) {\r\n        case \"orders\":\r\n          setTableColumns(ordersColumns);\r\n          setTableData(completeOrders);\r\n          break;\r\n        case \"carts\":\r\n          setTableColumns(cartsColumns);\r\n          setTableData(carts);\r\n          break;\r\n        case \"inserts\":\r\n          setTableColumns(insertsColumns);\r\n          setTableData(inserts);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [ic_inventory_section]);\r\n  return (\r\n    <div className=\"inventoryMainContainer\">\r\n      <div className=\"dataNavigatorContainer\">\r\n        <ButtonGroup\r\n          disableElevation\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          aria-label=\"contained primary button group\"\r\n        >\r\n          <Button\r\n            className={\r\n              ic_inventory_section === \"orders\" ? \"button-active\" : null\r\n            }\r\n            onClick={() => {\r\n              set_ic_inventory_section(\"orders\");\r\n            }}\r\n          >\r\n            Orders\r\n          </Button>\r\n          <Button\r\n            className={\r\n              ic_inventory_section === \"carts\" ? \"button-active\" : null\r\n            }\r\n            onClick={() => {\r\n              set_ic_inventory_section(\"carts\");\r\n            }}\r\n          >\r\n            Carts\r\n          </Button>\r\n          <Button\r\n            className={\r\n              ic_inventory_section === \"inserts\" ? \"button-active\" : null\r\n            }\r\n            onClick={() => {\r\n              set_ic_inventory_section(\"inserts\");\r\n            }}\r\n          >\r\n            Inserts\r\n          </Button>\r\n        </ButtonGroup>\r\n      </div>\r\n      <div className=\"tableContainer\" ref={heightdiv}>\r\n        <MaterialTable\r\n          icons={tableIcons}\r\n          title={\r\n            ic_inventory_section.charAt(0).toUpperCase() +\r\n            ic_inventory_section.slice(1)\r\n          }\r\n          options={{\r\n            actionsColumnIndex: -1,\r\n            padding: \"dense\",\r\n            toolbar: true,\r\n            search: true,\r\n            headerStyle: { position: \"sticky\", top: 0 },\r\n            pageSizeOptions: [15, 50, 100, tableData.length],\r\n            pageSize: 15,\r\n            minBodyHeight: height - 135,\r\n            maxBodyHeight: height - 135,\r\n          }}\r\n          columns={tableColumns}\r\n          data={tableData}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\nexport default Inventory;\r\n","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Orders.js",["160","161","162","163","164","165","166"],"import React, { useContext, useState } from \"react\";\r\nimport { InstallCartContext } from \"../resources/InstallCartContext\";\r\nimport { Context } from \"../../../_context/MainContext\";\r\nimport { Formik, useFormik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Steps } from \"antd\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  EditOutlined,\r\n  DeleteOutlined,\r\n  ExclamationCircleTwoTone,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  Paper,\r\n  InputBase,\r\n  Button,\r\n  Tooltip,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\n// icons\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport moment from \"moment\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Collapse from \"react-collapse\";\r\nimport MaterialButton from \"@material-ui/core/Button\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport \"../styles/orders.css\";\r\nimport \"../styles/addForm.css\";\r\nconst { Step } = Steps;\r\nconst Orders = React.memo(() => {\r\n  const {\r\n    ordersState,\r\n    SwitchOrders,\r\n    ordersSwitchState,\r\n    ordersCheckboxState,\r\n    SearchOrders,\r\n    ToggleComplete,\r\n    addDialogVisibilityState,\r\n  } = useContext(InstallCartContext);\r\n  const [orders] = ordersState;\r\n  const [ordersCheckbox] = ordersCheckboxState;\r\n  const [ordersSwitch] = ordersSwitchState;\r\n  const [searchText_temp, setSearchText_temp] = useState(\"\");\r\n  const [, setAddDialogVisibility] = addDialogVisibilityState;\r\n  return (\r\n    <div className=\"ordersMainContainer\">\r\n      <div className=\"ordersContainer\">\r\n        <div className=\"ordersList\">\r\n          {Object.values(orders).map((order, i) => (\r\n            <OrderElement data={order} key={i} />\r\n          ))}\r\n        </div>\r\n        <div className=\"ordersControls\">\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disableElevation\r\n            startIcon={<AddIcon />}\r\n            onClick={() => {\r\n              setAddDialogVisibility(true);\r\n            }}\r\n            style={{ marginBottom: \"1em\" }}\r\n          >\r\n            Add New Order\r\n          </Button>\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              borderBottom: \"1PX solid #e2e2e2\",\r\n              marginBottom: \"1em\",\r\n            }}\r\n          ></div>\r\n          <Paper\r\n            elevation={2}\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              width: \"100%\",\r\n              padding: 6,\r\n              marginBottom: \"1em\",\r\n            }}\r\n          >\r\n            <InputBase\r\n              placeholder=\"Search orders\"\r\n              inputProps={{ \"aria-label\": \"search google maps\" }}\r\n              onChange={(event) => {\r\n                SearchOrders(event);\r\n                setSearchText_temp(event.target.value);\r\n              }}\r\n            />\r\n            <span style={{ marginLeft: \"auto\" }}>\r\n              <SearchIcon style={{ color: \"gray\" }} />\r\n            </span>\r\n          </Paper>\r\n          <div className=\"switchContainer\">\r\n            <div className=\"inner\">\r\n              <span>Show complete</span>\r\n              <Switch\r\n                disabled={ordersCheckbox}\r\n                checked={ordersSwitch}\r\n                onChange={(event) => {\r\n                  SwitchOrders(event, searchText_temp);\r\n                }}\r\n                color=\"primary\"\r\n                name=\"checkedB\"\r\n                inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n              />\r\n            </div>\r\n            <div className=\"inner\">\r\n              <span>Only completed</span>\r\n              <Switch\r\n                disabled={ordersSwitch}\r\n                checked={ordersCheckbox}\r\n                onChange={(event) => ToggleComplete(event.target.checked)}\r\n                color=\"primary\"\r\n                inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <AddDialog />\r\n      <DeleteConfirmDialog />\r\n      {/* <EditDialog /> */}\r\n    </div>\r\n  );\r\n});\r\nconst OrderElement = React.memo(({ data }) => {\r\n  // variable declaration:\r\n  let FW_LOB = data.FW_LOB;\r\n  let FW_SLOT = data.FW_SLOT;\r\n  let MONTH = data.MONTH;\r\n  let DEVICE_COUNT = data.DEVICE_COUNT;\r\n  let CREATED_DATE = data.CREATED_DATE ? data.CREATED_DATE.date : null;\r\n  let START_DATE = data.START_DATE.date;\r\n  let SHIP_DATE = data.SHIP_DATE.date;\r\n  let ROSD = data.ROSD.date;\r\n  let CART_RETURN = data.CART_RETURN ? data.CART_RETURN.date : null;\r\n  let GON = data.GON;\r\n  let PROJECT_DESCRIPTION = data.PROJECT_DESCRIPTION;\r\n  let STATUS =\r\n    data.STATUS === \"manufacturing in-process\"\r\n      ? \"Mfg in-process\"\r\n      : data.STATUS === \"configuration/assembly\"\r\n      ? \"Config/Assembly\"\r\n      : data.STATUS === \"secure in staging space\"\r\n      ? \"Staging\"\r\n      : data.STATUS;\r\n  let ESTIMATED_CART_QTY = data.ESTIMATED_CART_QTY;\r\n  let PACKAGE = data.PACKAGE;\r\n  let FLAGGED_ON_CONFIG_APP = data.FLAGGED_ON_CONFIG_APP;\r\n  let NTP_SUBMITTED = data.NTP_SUBMITTED;\r\n  let PROJECT_MANAGER_CONTACT = data.PROJECT_MANAGER_CONTACT;\r\n  let FE = data.FE;\r\n  let OWNER = JSON.parse(data.OWNER);\r\n  let CONFIGURATION_INFORMATION = data.CONFIGURATION_INFORMATION;\r\n  // states\r\n  const [detailsCollapse, setDetailsCollapse] = useState(false);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  // context\r\n  const {\r\n    statusListState,\r\n    workingOrderState,\r\n    deleteDialogVisibilityState,\r\n    editDialogVisibilityState,\r\n  } = useContext(InstallCartContext);\r\n  const [, setDeleteDialogVisibility] = deleteDialogVisibilityState;\r\n  const [, setWorkingOrder] = workingOrderState;\r\n  const [statusList] = statusListState;\r\n  const [, setEditDialogVisibility] = editDialogVisibilityState;\r\n  return (\r\n    <div className=\"order-container-outter \">\r\n      <div className=\"order-container-inner\">\r\n        <div className=\"primary-data-container\">\r\n          <Tooltip title=\"GON\" placement=\"right\">\r\n            <span className=\"gon-label\">{`#${GON}`}</span>\r\n          </Tooltip>\r\n          <span className=\"projName-label\">{PROJECT_DESCRIPTION}</span>\r\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n            {OWNER ? (\r\n              <img\r\n                src={`https://supportcentral.gecdn.com/images/person/temp/${\r\n                  OWNER ? OWNER.SSO : null\r\n                }.jpg`}\r\n                alt=\"user-img\"\r\n                style={{\r\n                  width: \"2em\",\r\n                  height: \"2em\",\r\n                  borderRadius: \"50%\",\r\n                  objectFit: \"cover\",\r\n                  marginRight: \"0.5em\",\r\n                }}\r\n              />\r\n            ) : (\r\n              <div\r\n                style={{\r\n                  width: \"2em\",\r\n                  height: \"2em\",\r\n                  borderRadius: \"50%\",\r\n                  marginRight: \"0.5em\",\r\n                  backgroundColor: \"#e2e2e2\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <PersonIcon style={{ color: \"gray\" }} />\r\n              </div>\r\n            )}\r\n\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              <span>{OWNER ? OWNER.NAME : null}</span>\r\n              <span style={{ fontSize: \"0.8em\" }}>\r\n                {CREATED_DATE\r\n                  ? moment(CREATED_DATE).format(\"MM/DD/YYYY\")\r\n                  : \"No date available\"}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={{ marginRight: \"2em\" }}>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              marginBottom: \"0.5em\",\r\n              margin: \"0.5em 0\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                width: \"0.5em\",\r\n                height: \"0.5em\",\r\n                backgroundColor: \"#45b6fe\",\r\n                borderRadius: \"50%\",\r\n                marginRight: \"1em\",\r\n                position: \"relative\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  height: \"2em\",\r\n                  position: \"absolute\",\r\n                  width: \"1px\",\r\n                  backgroundColor: \"#e2e2e2\",\r\n                  left: \"50%\",\r\n                  transform: `translate(${-1}px, ${0}px)`,\r\n                  top: \"0.7em\",\r\n                }}\r\n              />\r\n            </div>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              <span style={{ color: \"gray\", fontSize: \"0.7em\" }}>\r\n                Start date\r\n              </span>\r\n              <span\r\n                style={{\r\n                  borderLeft: \"1px solid #e2e2e2\",\r\n                  paddingLeft: \"0.5em\",\r\n                }}\r\n              >\r\n                {moment(START_DATE).format(\"MM/DD/YYYY\")}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              marginBottom: \"0.5em\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                width: \"0.5em\",\r\n                height: \"0.5em\",\r\n                backgroundColor: \"#45b6fe\",\r\n                borderRadius: \"50%\",\r\n                marginRight: \"1em\",\r\n                position: \"relative\",\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  height: \"2em\",\r\n                  position: \"absolute\",\r\n                  width: \"1px\",\r\n                  backgroundColor: \"#e2e2e2\",\r\n                  left: \"50%\",\r\n                  transform: `translate(${-1}px, ${0}px)`,\r\n                  top: \"0.7em\",\r\n                }}\r\n              />\r\n            </div>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              <span style={{ color: \"gray\", fontSize: \"0.7em\" }}>\r\n                Ship date\r\n              </span>\r\n              <span\r\n                style={{\r\n                  borderLeft: \"1px solid #e2e2e2\",\r\n                  paddingLeft: \"0.5em\",\r\n                }}\r\n              >\r\n                {moment(START_DATE).format(\"MM/DD/YYYY\")}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              marginBottom: \"0.5em\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                width: \"0.5em\",\r\n                height: \"0.5em\",\r\n                backgroundColor: \"#45b6fe\",\r\n                borderRadius: \"50%\",\r\n                marginRight: \"1em\",\r\n                position: \"relative\",\r\n              }}\r\n            ></div>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              <span\r\n                style={{\r\n                  color: \"gray\",\r\n                  fontSize: \"0.7em\",\r\n                  whiteSpace: \"nowrap\",\r\n                }}\r\n              >\r\n                Requested On-Site date\r\n              </span>\r\n              <span\r\n                style={{\r\n                  borderLeft: \"1px solid #e2e2e2\",\r\n                  paddingLeft: \"0.5em\",\r\n                }}\r\n              >\r\n                {moment(START_DATE).format(\"MM/DD/YYYY\")}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"captions\">\r\n          {!CREATED_DATE ? (\r\n            <div className=\"caption-container\">\r\n              <ExclamationCircleTwoTone\r\n                twoToneColor=\"#faca0f\"\r\n                style={{ fontSize: \"18px\", marginRight: \"8px\" }}\r\n              />\r\n              <span>Created date missing</span>\r\n            </div>\r\n          ) : null}\r\n          {!CART_RETURN ? (\r\n            <div className=\"caption-container\">\r\n              <ExclamationCircleTwoTone\r\n                twoToneColor=\"#faca0f\"\r\n                style={{ fontSize: \"18px\", marginRight: \"8px\" }}\r\n              />\r\n              <span>Cart return missing</span>\r\n            </div>\r\n          ) : null}\r\n          {!FE ? (\r\n            <div className=\"caption-container\">\r\n              <ExclamationCircleTwoTone\r\n                twoToneColor=\"#faca0f\"\r\n                style={{ fontSize: \"18px\", marginRight: \"8px\" }}\r\n              />\r\n              <span>FE missing</span>\r\n            </div>\r\n          ) : null}\r\n          {!STATUS ? (\r\n            <div className=\"caption-container\">\r\n              <ExclamationCircleTwoTone\r\n                twoToneColor=\"#faca0f\"\r\n                style={{ fontSize: \"18px\", marginRight: \"8px\" }}\r\n              />\r\n              <span>Status missing</span>\r\n            </div>\r\n          ) : null}\r\n          {!CONFIGURATION_INFORMATION ? (\r\n            <div className=\"caption-container\">\r\n              <ExclamationCircleTwoTone\r\n                twoToneColor=\"#faca0f\"\r\n                style={{ fontSize: \"18px\", marginRight: \"8px\" }}\r\n              />\r\n              <span>Configuration Information missing</span>\r\n            </div>\r\n          ) : null}\r\n          {!PROJECT_MANAGER_CONTACT ? (\r\n            <div className=\"caption-container\">\r\n              <ExclamationCircleTwoTone\r\n                twoToneColor=\"#faca0f\"\r\n                style={{ fontSize: \"18px\", marginRight: \"8px\" }}\r\n              />\r\n              <span>Project Manager missing</span>\r\n            </div>\r\n          ) : null}\r\n          <div style={{ marginTop: \"auto\", display: \"flex\" }}>\r\n            <div className=\"timeMarkContainer\">\r\n              <span>FW LOB</span>\r\n              <span>{FW_LOB}</span>\r\n            </div>\r\n            <div className=\"timeMarkContainer\">\r\n              <span>FW SLOT</span>\r\n              <span>{FW_SLOT}</span>\r\n            </div>\r\n            <div className=\"timeMarkContainer\">\r\n              <span>MONTH</span>\r\n              <span>{MONTH}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"controls\">\r\n          <Menu\r\n            id=\"simple-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={() => {\r\n              setAnchorEl(null);\r\n            }}\r\n          >\r\n            <MenuItem\r\n              onClick={() => {\r\n                setEditDialogVisibility(true);\r\n                setWorkingOrder(data);\r\n                setAnchorEl(null);\r\n              }}\r\n            >\r\n              <EditOutlined style={{ color: \"gray\", marginRight: \"0.5em\" }} />\r\n              Edit\r\n            </MenuItem>\r\n            <MenuItem\r\n              onClick={() => {\r\n                setDeleteDialogVisibility(true);\r\n                setWorkingOrder(data);\r\n                setAnchorEl(null);\r\n              }}\r\n            >\r\n              <DeleteOutlined style={{ color: \"gray\", marginRight: \"0.5em\" }} />\r\n              Delete\r\n            </MenuItem>\r\n          </Menu>\r\n          {data.STATUS === \"order complete\" ? null : (\r\n            <IconButton\r\n              onClick={(event) => {\r\n                setAnchorEl(event.currentTarget);\r\n              }}\r\n            >\r\n              <MoreVertIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          )}\r\n          <IconButton\r\n            type=\"text\"\r\n            className=\"order-icon\"\r\n            style={\r\n              data.STATUS === \"order complete\" ? { marginTop: \"auto\" } : null\r\n            }\r\n            onClick={() => {\r\n              setDetailsCollapse(!detailsCollapse);\r\n            }}\r\n          >\r\n            {detailsCollapse ? (\r\n              <ExpandLessIcon fontSize=\"small\" />\r\n            ) : (\r\n              <ExpandMoreIcon fontSize=\"small\" />\r\n            )}\r\n          </IconButton>\r\n        </div>\r\n        <div\r\n          style={{\r\n            backgroundColor:\r\n              STATUS === \"cancelled\"\r\n                ? \"#ed2939\"\r\n                : STATUS === \"issue needs attention\"\r\n                ? \"#FFD300\"\r\n                : STATUS === \"order complete\"\r\n                ? \"#228c22\"\r\n                : \"#3792cb\",\r\n            width: \"2em\",\r\n            alignSelf: \"stretch\",\r\n            borderTopRightRadius: 5,\r\n            borderBottomRightRadius: !detailsCollapse ? 5 : 0,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <p\r\n            className=\"statusLabel\"\r\n            style={{\r\n              color:\r\n                STATUS === \"cancelled\"\r\n                  ? \"white\"\r\n                  : STATUS === \"issue needs attention\"\r\n                  ? \"black\"\r\n                  : \"#fafafa\",\r\n              fontWeight: STATUS === \"bold\" ? \"white\" : \"normal\",\r\n            }}\r\n          >\r\n            {STATUS.charAt(0).toUpperCase() + STATUS.slice(1)}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <Collapse isOpened={detailsCollapse}>\r\n        <div className=\"order-description\">\r\n          <div style={{ minWidth: 150 }}>\r\n            <div className=\"description-container\">\r\n              <span>{PROJECT_DESCRIPTION}</span>\r\n              <span>Project description</span>\r\n            </div>\r\n            <div className=\"description-container\">\r\n              <span>{GON}</span>\r\n              <span>GON</span>\r\n            </div>\r\n            <div className=\"description-container\">\r\n              <span>{OWNER ? `${OWNER.NAME} (${OWNER.SSO})` : \"NADA\"}</span>\r\n              <span>Owner</span>\r\n            </div>\r\n            <div className=\"description-container\">\r\n              <span>\r\n                {CREATED_DATE ? (\r\n                  moment(CREATED_DATE).format(\"MM/DD/YYYY\")\r\n                ) : (\r\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <ExclamationCircleTwoTone />\r\n                    <span\r\n                      style={{\r\n                        marginLeft: \"0.5em\",\r\n                        fontSize: \"0.8em\",\r\n                        color: \"gray\",\r\n                      }}\r\n                    >\r\n                      Missing\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </span>\r\n              <span>Created date</span>\r\n            </div>\r\n            <div className=\"description-container\">\r\n              <span>{FW_SLOT}</span>\r\n              <span>FW Slot</span>\r\n            </div>\r\n            <div className=\"description-container\">\r\n              <span>{FW_LOB}</span>\r\n              <span>FW Lob</span>\r\n            </div>\r\n            <div className=\"description-container\">\r\n              <span>{MONTH}</span>\r\n              <span>Month</span>\r\n            </div>\r\n            <div className=\"description-container\">\r\n              <span>\r\n                {START_DATE ? (\r\n                  moment(START_DATE).format(\"MMMM Do YYYY\")\r\n                ) : (\r\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <ExclamationCircleTwoTone />\r\n                    <span\r\n                      style={{\r\n                        marginLeft: \"0.5em\",\r\n                        fontSize: \"0.8em\",\r\n                        color: \"gray\",\r\n                      }}\r\n                    >\r\n                      Missing\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </span>\r\n              <span>Start date</span>\r\n            </div>\r\n            <div className=\"description-container\">\r\n              <span>\r\n                {SHIP_DATE ? (\r\n                  moment(SHIP_DATE).format(\"MMMM Do YYYY\")\r\n                ) : (\r\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <ExclamationCircleTwoTone />\r\n                    <span\r\n                      style={{\r\n                        marginLeft: \"0.5em\",\r\n                        fontSize: \"0.8em\",\r\n                        color: \"gray\",\r\n                      }}\r\n                    >\r\n                      Missing\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </span>\r\n              <span>Ship date</span>\r\n            </div>\r\n            <div className=\"description-container\">\r\n              <span>\r\n                {ROSD ? (\r\n                  moment(ROSD).format(\"MMMM Do YYYY\")\r\n                ) : (\r\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                    <ExclamationCircleTwoTone />\r\n                    <span\r\n                      style={{\r\n                        marginLeft: \"0.5em\",\r\n                        fontSize: \"0.8em\",\r\n                        color: \"gray\",\r\n                      }}\r\n                    >\r\n                      Missing\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </span>\r\n              <span>ROSD</span>\r\n            </div>\r\n            <div className=\"description-container\">\r\n              <span>{STATUS.charAt(0).toUpperCase() + STATUS.slice(1)}</span>\r\n              <span>Status</span>\r\n            </div>\r\n          </div>\r\n          <div style={{ flexGrow: 1, paddingLeft: \"2em\" }}>\r\n            <table className=\"seccondary-description-table\">\r\n              <tbody>\r\n                <tr className=\"table-head-title\">\r\n                  <td style={{ padding: \"0.5em\" }}>Project Manager Contact</td>\r\n                  <td className=\"table-desc-content\" width=\"60%\">\r\n                    {PROJECT_MANAGER_CONTACT ? (\r\n                      PROJECT_MANAGER_CONTACT\r\n                    ) : (\r\n                      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                        <ExclamationCircleTwoTone />\r\n                        <span\r\n                          style={{\r\n                            marginLeft: \"0.5em\",\r\n                            fontSize: \"0.8em\",\r\n                            color: \"gray\",\r\n                          }}\r\n                        >\r\n                          Missing\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n                <tr className=\"table-head-title\">\r\n                  <td style={{ padding: \"0.5em\" }}>FE</td>\r\n                  <td className=\"table-desc-content\" width=\"60%\">\r\n                    {FE ? (\r\n                      FE\r\n                    ) : (\r\n                      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                        <ExclamationCircleTwoTone />\r\n                        <span\r\n                          style={{\r\n                            marginLeft: \"0.5em\",\r\n                            fontSize: \"0.8em\",\r\n                            color: \"gray\",\r\n                          }}\r\n                        >\r\n                          Missing\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n                <tr className=\"table-head-title\">\r\n                  <td style={{ padding: \"0.5em\" }}>Package</td>\r\n                  <td className=\"table-desc-content\" width=\"60%\">\r\n                    {PACKAGE ? (\r\n                      PACKAGE\r\n                    ) : (\r\n                      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                        <ExclamationCircleTwoTone />\r\n                        <span\r\n                          style={{\r\n                            marginLeft: \"0.5em\",\r\n                            fontSize: \"0.8em\",\r\n                            color: \"gray\",\r\n                          }}\r\n                        >\r\n                          Missing\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n                <tr className=\"table-head-title\">\r\n                  <td style={{ padding: \"0.5em\" }}>Flagged on config app</td>\r\n                  <td className=\"table-desc-content\" width=\"60%\">\r\n                    {FLAGGED_ON_CONFIG_APP ? \"Yes\" : \"No\"}\r\n                  </td>\r\n                </tr>\r\n                <tr className=\"table-head-title\">\r\n                  <td style={{ padding: \"0.5em\" }}>NTP Submitted</td>\r\n                  <td className=\"table-desc-content\" width=\"60%\">\r\n                    {NTP_SUBMITTED ? \"Yes\" : \"No\"}\r\n                  </td>\r\n                </tr>\r\n                <tr className=\"table-head-title\">\r\n                  <td style={{ padding: \"0.5em\" }}>Estimated Cart Qty</td>\r\n                  <td className=\"table-desc-content\" width=\"60%\">\r\n                    {ESTIMATED_CART_QTY ? (\r\n                      parseFloat(ESTIMATED_CART_QTY).toFixed(2)\r\n                    ) : (\r\n                      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                        <ExclamationCircleTwoTone />\r\n                        <span\r\n                          style={{\r\n                            marginLeft: \"0.5em\",\r\n                            fontSize: \"0.8em\",\r\n                            color: \"gray\",\r\n                          }}\r\n                        >\r\n                          Missing\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n                <tr className=\"table-head-title\">\r\n                  <td style={{ padding: \"0.5em\" }}>Cart Return</td>\r\n                  <td className=\"table-desc-content\" width=\"60%\">\r\n                    {CART_RETURN ? (\r\n                      moment(CART_RETURN).format(\"MMMM Do YYYY\")\r\n                    ) : (\r\n                      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                        <ExclamationCircleTwoTone />\r\n                        <span\r\n                          style={{\r\n                            marginLeft: \"0.5em\",\r\n                            fontSize: \"0.8em\",\r\n                            color: \"gray\",\r\n                          }}\r\n                        >\r\n                          Missing\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n                <tr className=\"table-head-title\">\r\n                  <td style={{ padding: \"0.5em\" }}>Device Count</td>\r\n                  <td className=\"table-desc-content\" width=\"60%\">\r\n                    {DEVICE_COUNT ? (\r\n                      parseInt(DEVICE_COUNT)\r\n                    ) : (\r\n                      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                        <ExclamationCircleTwoTone />\r\n                        <span\r\n                          style={{\r\n                            marginLeft: \"0.5em\",\r\n                            fontSize: \"0.8em\",\r\n                            color: \"gray\",\r\n                          }}\r\n                        >\r\n                          Missing\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n            <table className=\"seccondary-description-table\">\r\n              <tbody>\r\n                <tr className=\"table-head-title\" style={{ borderTop: \"none\" }}>\r\n                  <td>Configuration Information</td>\r\n                </tr>\r\n                <tr>\r\n                  <td\r\n                    className=\"table-desc-content\"\r\n                    style={{\r\n                      border: \"1px solid #e2e2e2\",\r\n                      maxHeight: 200,\r\n                      overflowY: \"auto\",\r\n                      whiteSpace: \"pre-wrap\",\r\n                      maxWidth: 20,\r\n                    }}\r\n                  >\r\n                    {CONFIGURATION_INFORMATION ? (\r\n                      <div style={{ height: 200 }}>\r\n                        <p>{CONFIGURATION_INFORMATION}</p>\r\n                      </div>\r\n                    ) : (\r\n                      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                        <ExclamationCircleTwoTone />\r\n                        <span\r\n                          style={{\r\n                            marginLeft: \"0.5em\",\r\n                            fontSize: \"0.8em\",\r\n                            color: \"gray\",\r\n                          }}\r\n                        >\r\n                          Missing\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n        <div className=\"order-trace\">\r\n          <Steps\r\n            progressDot\r\n            current={statusList.findIndex((item) => item === data.STATUS)}\r\n            direction=\"vertical\"\r\n            size=\"small\"\r\n            status={\r\n              STATUS === \"cancelled\" || data.STATUS === \"issue needs attention\"\r\n                ? \"error\"\r\n                : STATUS === \"order complete\"\r\n                ? \"finish\"\r\n                : \"process\"\r\n            }\r\n          >\r\n            {Object.values(statusList).map((key, i) => (\r\n              <Step\r\n                key={i}\r\n                title={key.replace(/\\w\\S*/g, (w) =>\r\n                  w.replace(/^\\w/, (c) => c.toUpperCase())\r\n                )}\r\n              />\r\n            ))}\r\n          </Steps>\r\n        </div>\r\n      </Collapse>\r\n    </div>\r\n  );\r\n});\r\nconst AddDialog = React.memo(() => {\r\n  const { userDataState } = useContext(Context);\r\n  const {\r\n    AddOrder,\r\n    addDialogVisibilityState,\r\n    statusListState,\r\n    devicesListState,\r\n    genericLoaderState,\r\n  } = useContext(InstallCartContext);\r\n  const [userData] = userDataState;\r\n  const [genericLoader] = genericLoaderState;\r\n  const [\r\n    addDialogVisibility,\r\n    setAddDialogVisibility,\r\n  ] = addDialogVisibilityState;\r\n  const [statusList] = statusListState;\r\n  const [devicesList] = devicesListState;\r\n  const ValidationSchema = Yup.object().shape({\r\n    START_DATE: Yup.string().required(\"Required\"),\r\n    SHIP_DATE: Yup.string().required(\"Required\"),\r\n    ROSD: Yup.string().required(\"Required\"),\r\n    GON: Yup.string().required(),\r\n  });\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        START_DATE: new Date(),\r\n        PID: \"\",\r\n        GON: \"\",\r\n        CART_RETURN: \"\",\r\n        ROSD: \"\",\r\n        SHIP_DATE: \"\",\r\n      }}\r\n      // validationSchema={ValidationSchema}\r\n      onSubmit={(values) => console.log(values)}\r\n    >\r\n      {({ errors, values, handleChange }) => (\r\n        <Dialog\r\n          open={addDialogVisibility}\r\n          scroll=\"body\"\r\n          onClose={() => {\r\n            setAddDialogVisibility(false);\r\n          }}\r\n          style={{ zIndex: 2 }}\r\n        >\r\n          <DialogTitle id=\"simple-dialog-title\">Add new order</DialogTitle>\r\n          <DialogContent dividers>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              <Form id=\"addForm\">\r\n                <div style={{ display: \"flex\" }}>\r\n                  <KeyboardDatePicker\r\n                    disableToolbar\r\n                    variant=\"inline\"\r\n                    format=\"MM/dd/yyyy\"\r\n                    margin=\"normal\"\r\n                    label=\"Start Date\"\r\n                    name=\"START_DATE\"\r\n                    KeyboardButtonProps={{\r\n                      \"aria-label\": \"change date\",\r\n                    }}\r\n                    value={values.START_DATE}\r\n                    onChange={handleChange}\r\n                    style={{ marginRight: \"1em\" }}\r\n                  />\r\n                  <KeyboardDatePicker\r\n                    disableToolbar\r\n                    variant=\"inline\"\r\n                    format=\"MM/dd/yyyy\"\r\n                    margin=\"normal\"\r\n                    label=\"Ship Date\"\r\n                    name=\"SHIP_DATE\"\r\n                    KeyboardButtonProps={{\r\n                      \"aria-label\": \"change date\",\r\n                    }}\r\n                    onChange={(e) => {\r\n                      values[e.target.name] = e.target.value;\r\n                    }}\r\n                    style={{ marginRight: \"1em\" }}\r\n                  />\r\n                  <KeyboardDatePicker\r\n                    disableToolbar\r\n                    variant=\"inline\"\r\n                    format=\"MM/dd/yyyy\"\r\n                    margin=\"normal\"\r\n                    label=\"Requested On-Site Date\"\r\n                    name=\"ROSD\"\r\n                    KeyboardButtonProps={{\r\n                      \"aria-label\": \"change date\",\r\n                    }}\r\n                    onChange={() => {}}\r\n                  />\r\n                </div>\r\n                <div style={{ display: \"flex\", alignItems: \"baseline\" }}>\r\n                  <KeyboardDatePicker\r\n                    disableToolbar\r\n                    variant=\"inline\"\r\n                    format=\"MM/dd/yyyy\"\r\n                    margin=\"normal\"\r\n                    label=\"Cart Return\"\r\n                    name=\"CART_RETURN\"\r\n                    KeyboardButtonProps={{\r\n                      \"aria-label\": \"change date\",\r\n                    }}\r\n                    onChange={() => {}}\r\n                    style={{ marginRight: \"1em\", width: \"32%\" }}\r\n                  />\r\n                  <TextField\r\n                    label=\"General Order Number\"\r\n                    name=\"GON\"\r\n                    error={Boolean(errors.GON)}\r\n                    helperText={errors.GON ? \"Required\" : null}\r\n                    type=\"number\"\r\n                    style={{ marginRight: \"1em\" }}\r\n                  />\r\n                  <TextField label=\"PID\" name=\"PID\" type=\"number\" />\r\n                </div>\r\n              </Form>\r\n            </MuiPickersUtilsProvider>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <MaterialButton\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                setAddDialogVisibility(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </MaterialButton>\r\n            <MaterialButton\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              form=\"addForm\"\r\n            >\r\n              Add\r\n            </MaterialButton>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n    </Formik>\r\n  );\r\n});\r\nconst DeleteConfirmDialog = React.memo(() => {\r\n  const {\r\n    DeleteOrder,\r\n    workingOrderState,\r\n    genericLoaderState,\r\n    deleteDialogVisibilityState,\r\n  } = useContext(InstallCartContext);\r\n  const [workingOrder, setWorkingOrder] = workingOrderState;\r\n  const [\r\n    deleteDialogVisibility,\r\n    setDeleteDialogVisibility,\r\n  ] = deleteDialogVisibilityState;\r\n  const [genericLoader] = genericLoaderState;\r\n  return (\r\n    <Dialog\r\n      open={deleteDialogVisibility}\r\n      onClose={() => {\r\n        setDeleteDialogVisibility(false);\r\n      }}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">\r\n        Are you sure to delete this item?\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText\r\n          id=\"alert-dialog-description\"\r\n          style={{ overflow: \"hidden\" }}\r\n        >\r\n          This action can't be undone.\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <MaterialButton\r\n          onClick={() => {\r\n            setDeleteDialogVisibility(false);\r\n            setWorkingOrder({});\r\n          }}\r\n          color=\"primary\"\r\n        >\r\n          Cancel\r\n        </MaterialButton>\r\n        <MaterialButton\r\n          startIcon={\r\n            genericLoader ? (\r\n              <CircularProgress size={20} color=\"inherit\" />\r\n            ) : null\r\n          }\r\n          onClick={() => {\r\n            DeleteOrder(workingOrder);\r\n          }}\r\n          color=\"primary\"\r\n          autoFocus\r\n          variant=\"contained\"\r\n        >\r\n          Ok\r\n        </MaterialButton>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n});\r\n// const EditDialog = React.memo(() => {\r\n//   const {\r\n//     EditOrder,\r\n//     editDialogVisibilityState,\r\n//     statusListState,\r\n//     workingOrderState,\r\n//     // devicesListState,\r\n//   } = useContext(InstallCartContext);\r\n//   // const [devicesList] = devicesListState;\r\n//   const [workingOrder, setWorkingOrder] = workingOrderState;\r\n//   const [editForm] = Form.useForm();\r\n//   editForm.resetFields();\r\n//   const dateFormat = \"MM/DD/YYYY\";\r\n//   const [statusList] = statusListState;\r\n//   const [\r\n//     editDialogVisibility,\r\n//     setEditDialogVisibility,\r\n//   ] = editDialogVisibilityState;\r\n//   editForm.setFieldsValue({\r\n//     gon: parseInt(workingOrder.GON),\r\n//     projectName: workingOrder.PROJECT_DESCRIPTION,\r\n//     shipDate: workingOrder.SHIP_DATE\r\n//       ? moment(workingOrder.SHIP_DATE, dateFormat)\r\n//       : null,\r\n//     rosd: workingOrder.ROSD ? moment(workingOrder.ROSD, dateFormat) : null,\r\n//     projectManager: workingOrder.PROJECT_MANAGER,\r\n//     wrd: workingOrder.WRD ? moment(workingOrder.WRD, dateFormat) : null,\r\n//     configurationInformation: workingOrder.CONFIGURATION_INFORMATION,\r\n//     status: workingOrder.STATUS,\r\n//   });\r\n//   const onFinish = (values) => {\r\n//     if (!values.rosd) {\r\n//       values.rosd = moment(values.rosd).format(dateFormat);\r\n//     } else {\r\n//       values.rosd = \"\";\r\n//     }\r\n//     if (!values.shipDate) {\r\n//       values.shipDate = moment(values.shipDate).format(dateFormat);\r\n//     } else {\r\n//       values.shipDate = \"\";\r\n//     }\r\n//     if (!values.recommendedBuild) {\r\n//       values.recommendedBuild = false;\r\n//     } else {\r\n//       values.recommendedBuild = true;\r\n//     }\r\n//     if (!values.projectManager) {\r\n//       values.projectManager = \"\";\r\n//     }\r\n//     values.wrd\r\n//       ? (values.wrd = moment(values.wrd).format(dateFormat))\r\n//       : (values.wrd = \"\");\r\n//     if (!values.configurationInformation) {\r\n//       values.configurationInformation = \"\";\r\n//     }\r\n//     if (!values.status) {\r\n//       values.status = \"\";\r\n//     }\r\n//     if (!values.devices) {\r\n//       values.devices = [];\r\n//     }\r\n//     values[\"id\"] = workingOrder.ID;\r\n//     EditOrder(values);\r\n//   };\r\n//   return (\r\n//     <Dialog\r\n//       open={editDialogVisibility}\r\n//       scroll=\"body\"\r\n//       onClose={() => {\r\n//         setEditDialogVisibility(false);\r\n//         setWorkingOrder({});\r\n//       }}\r\n//       style={{ zIndex: 2 }}\r\n//     >\r\n//       <DialogTitle>Edit Item</DialogTitle>\r\n//       <DialogContent>\r\n//         <Form form={editForm} onFinish={onFinish}>\r\n//           <div className=\"formRow\">\r\n//             <div className=\"formItem\">\r\n//               <span>General Order Number:</span>\r\n//               <Form.Item name=\"gon\" noStyle>\r\n//                 <Input type=\"number\" allowClear />\r\n//               </Form.Item>\r\n//             </div>\r\n//             <div className=\"formItem\">\r\n//               <span>Project Name:</span>\r\n//               <Form.Item name=\"projectName\" noStyle>\r\n//                 <Input allowClear />\r\n//               </Form.Item>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"formRow\">\r\n//             <div className=\"formItem\">\r\n//               <span>Ship Date:</span>\r\n//               <Form.Item name=\"shipDate\" noStyle>\r\n//                 <DatePicker allowClear format={dateFormat} />\r\n//               </Form.Item>\r\n//             </div>\r\n//             <div className=\"formItem\">\r\n//               <span>Requested On-Site Date:</span>\r\n//               <Form.Item name=\"rosd\" noStyle>\r\n//                 <DatePicker allowClear format={dateFormat} />\r\n//               </Form.Item>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"formRow\">\r\n//             <div className=\"formItem\">\r\n//               <span>Project Manager:</span>\r\n//               <Form.Item name=\"projectManager\" noStyle>\r\n//                 <Input allowClear />\r\n//               </Form.Item>\r\n//             </div>\r\n//             <div className=\"formItem\">\r\n//               <span>Warehouse Requested Date:</span>\r\n//               <Form.Item name=\"wrd\" noStyle>\r\n//                 <DatePicker allowClear format={dateFormat} />\r\n//               </Form.Item>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"formRow\">\r\n//             <div className=\"formItem\" style={{ width: \"100%\", marginRight: 0 }}>\r\n//               <span>Configuration information:</span>\r\n//               <Form.Item name=\"configurationInformation\" noStyle>\r\n//                 <TextArea rows={3} allowClear />\r\n//               </Form.Item>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"formRow\">\r\n//             <div className=\"formItem\" style={{ marginRight: 0, width: \"100%\" }}>\r\n//               <span>Status:</span>\r\n//               <Form.Item name=\"status\" noStyle>\r\n//                 <Select>\r\n//                   {statusList.map((key, i) => {\r\n//                     return (\r\n//                       <Option key={i} value={key}>\r\n//                         {key.charAt(0).toUpperCase() + key.slice(1)}\r\n//                       </Option>\r\n//                     );\r\n//                   })}\r\n//                 </Select>\r\n//               </Form.Item>\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"formRow\">\r\n//             <Form.Item name=\"recommendedBuild\" valuePropName=\"checked\" noStyle>\r\n//               <Checkbox defaultChecked>Want a recommended build?</Checkbox>\r\n//             </Form.Item>\r\n//           </div>\r\n//         </Form>\r\n//       </DialogContent>\r\n//       <DialogActions>\r\n//         <MaterialButton\r\n//           variant=\"contained\"\r\n//           color=\"default\"\r\n//           onClick={() => {\r\n//             setEditDialogVisibility(false);\r\n//             setWorkingOrder({});\r\n//           }}\r\n//         >\r\n//           Cancel\r\n//         </MaterialButton>\r\n//         <MaterialButton\r\n//           variant=\"contained\"\r\n//           color=\"primary\"\r\n//           onClick={() => {\r\n//             editForm.submit();\r\n//           }}\r\n//         >\r\n//           Update\r\n//         </MaterialButton>\r\n//       </DialogActions>\r\n//     </Dialog>\r\n//   );\r\n// });\r\nexport default Orders;\r\n","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\addForms.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\NavBar.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\auditItems.js",["167","168","169","170","171","172","173"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { ItSupportContext } from \"../resources/ItSupportContext\";\r\nimport MaterialTable from \"material-table\";\r\nimport { tableIcons } from \"../resources/tableIcons\";\r\nimport { Select, FormLabel, FormControl, Input } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { USELPUTIL02 } from \"../../../_resources/serverRoutes\";\r\n\r\nconst AuditDesktops = React.memo(() => {\r\n  // states\r\n  const [genericLoader, setGenericLoader] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  // context\r\n  const { heightState, inventoryAuditDataState } = useContext(ItSupportContext);\r\n  const [inventoryAuditData, setInventoryAuditData] = inventoryAuditDataState;\r\n\r\n  const [height] = heightState;\r\n  const fetchData = () => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/fetchAuditDesktops.php`)\r\n      .then((response) => {\r\n        setData(response.data);\r\n        setGenericLoader(false);\r\n        response.data.forEach((data, i) => {\r\n          inventoryAuditData[i].serialnumber = data.SERVICE_TAG;\r\n        });\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n    setData([]);\r\n    setGenericLoader(true);\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log(inventoryAuditData);\r\n  }, [inventoryAuditData]);\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        isLoading={genericLoader}\r\n        icons={tableIcons}\r\n        title=\"\"\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          padding: \"dense\",\r\n          pageSizeOptions: [data.length],\r\n          pageSize: 10,\r\n          search: false,\r\n        }}\r\n        style={{\r\n          textTransform: \"uppercase\",\r\n        }}\r\n        localization={{\r\n          header: { actions: \"\" },\r\n        }}\r\n        columns={[\r\n          {\r\n            title: \"BRAND\",\r\n            field: \"BRAND\",\r\n          },\r\n          {\r\n            title: \"MODEL\",\r\n            field: \"MODEL\",\r\n          },\r\n          {\r\n            title: \"SERVICE TAG\",\r\n            field: \"SERVICE_TAG\",\r\n          },\r\n          {\r\n            title: \"LOCATION\",\r\n            field: \"LOCATION\",\r\n          },\r\n          {\r\n            title: \"AREA\",\r\n            field: \"AREA\",\r\n          },\r\n          {\r\n            title: \"HOSTNAME\",\r\n            field: \"HOSTNAME\",\r\n          },\r\n          {\r\n            title: \"USERNAME\",\r\n            field: \"USERNAME\",\r\n          },\r\n        ]}\r\n        data={data}\r\n        detailPanel={(rowData) => {\r\n          const index = rowData.tableData.id;\r\n          const auditDataTemp = [...inventoryAuditData];\r\n          return (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                marginBottom: \"1em\",\r\n                marginRight: \"1em\",\r\n                marginLeft: \"1em\",\r\n              }}\r\n            >\r\n              <FormControl width=\"50%\">\r\n                <FormLabel>Status</FormLabel>\r\n                <Select\r\n                  variant=\"flushed\"\r\n                  name=\"status\"\r\n                  defaultValue={inventoryAuditData[rowData.tableData.id].status}\r\n                  onChange={(e) => {\r\n                    auditDataTemp[index].status = e.target.value;\r\n                    setInventoryAuditData(auditDataTemp);\r\n                  }}\r\n                >\r\n                  <option value=\"good\">Good</option>\r\n                  <option value=\"bad\">Bad</option>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl id=\"comments\">\r\n                <FormLabel>Comments</FormLabel>\r\n                <Input\r\n                  variant=\"flushed\"\r\n                  name=\"comments\"\r\n                  defaultValue={\r\n                    inventoryAuditData[rowData.tableData.id].comments\r\n                  }\r\n                  onChange={(e) => {\r\n                    auditDataTemp[index].comments = e.target.value;\r\n                    setInventoryAuditData(auditDataTemp);\r\n                  }}\r\n                ></Input>\r\n              </FormControl>\r\n            </div>\r\n          );\r\n        }}\r\n        onRowClick={(event, rowData, togglePanel) => togglePanel()}\r\n      ></MaterialTable>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst AuditLaptops = React.memo(() => {\r\n  // states\r\n  const [genericLoader, setGenericLoader] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  // context\r\n  const { heightState, inventoryAuditDataState } = useContext(ItSupportContext);\r\n  const [inventoryAuditData, setInventoryAuditData] = inventoryAuditDataState;\r\n\r\n  const [height] = heightState;\r\n  const fetchData = () => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/fetchAuditLaptops.php`)\r\n      .then((response) => {\r\n        setData(response.data);\r\n        setGenericLoader(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n    setData([]);\r\n    setGenericLoader(true);\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log(inventoryAuditData);\r\n  }, [inventoryAuditData]);\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        isLoading={genericLoader}\r\n        icons={tableIcons}\r\n        title=\"\"\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          padding: \"dense\",\r\n          pageSizeOptions: [data.length],\r\n          pageSize: 10,\r\n          search: false,\r\n        }}\r\n        style={{\r\n          textTransform: \"uppercase\",\r\n        }}\r\n        localization={{\r\n          header: { actions: \"\" },\r\n        }}\r\n        columns={[\r\n          {\r\n            title: \"BRAND\",\r\n            field: \"BRAND\",\r\n          },\r\n          {\r\n            title: \"MODEL\",\r\n            field: \"MODEL\",\r\n          },\r\n          {\r\n            title: \"SERVICE TAG\",\r\n            field: \"SERVICE_TAG\",\r\n          },\r\n          {\r\n            title: \"DEPARTMENT\",\r\n            field: \"DEPARTMENT\",\r\n          },\r\n          {\r\n            title: \"SSO\",\r\n            field: \"SSO\",\r\n          },\r\n          {\r\n            title: \"HOSTNAME\",\r\n            field: \"HOSTNAME\",\r\n          },\r\n          {\r\n            title: \"USERNAME\",\r\n            field: \"USERNAME\",\r\n          },\r\n        ]}\r\n        data={data}\r\n        detailPanel={(rowData) => {\r\n          const index = rowData.tableData.id;\r\n          const auditDataTemp = [...inventoryAuditData];\r\n          return (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                marginBottom: \"1em\",\r\n                marginRight: \"1em\",\r\n                marginLeft: \"1em\",\r\n              }}\r\n            >\r\n              <FormControl width=\"50%\">\r\n                <FormLabel>Status</FormLabel>\r\n                <Select\r\n                  variant=\"flushed\"\r\n                  name=\"status\"\r\n                  defaultValue={inventoryAuditData[rowData.tableData.id].status}\r\n                  onChange={(e) => {\r\n                    auditDataTemp[index].status = e.target.value;\r\n                    setInventoryAuditData(auditDataTemp);\r\n                  }}\r\n                >\r\n                  <option value=\"good\">Good</option>\r\n                  <option value=\"bad\">Bad</option>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl id=\"comments\">\r\n                <FormLabel>Comments</FormLabel>\r\n                <Input\r\n                  variant=\"flushed\"\r\n                  name=\"comments\"\r\n                  defaultValue={\r\n                    inventoryAuditData[rowData.tableData.id].comments\r\n                  }\r\n                  onChange={(e) => {\r\n                    auditDataTemp[index].comments = e.target.value;\r\n                    setInventoryAuditData(auditDataTemp);\r\n                  }}\r\n                ></Input>\r\n              </FormControl>\r\n            </div>\r\n          );\r\n        }}\r\n        onRowClick={(event, rowData, togglePanel) => togglePanel()}\r\n      ></MaterialTable>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst AuditMobiles = React.memo(() => {\r\n  // states\r\n  const [genericLoader, setGenericLoader] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  // context\r\n  const { heightState, inventoryAuditDataState } = useContext(ItSupportContext);\r\n  const [inventoryAuditData, setInventoryAuditData] = inventoryAuditDataState;\r\n\r\n  const [height] = heightState;\r\n  const fetchData = () => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/fetchAuditMobiles.php`)\r\n      .then((response) => {\r\n        setData(response.data);\r\n        setGenericLoader(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n    setData([]);\r\n    setGenericLoader(true);\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log(inventoryAuditData);\r\n  }, [inventoryAuditData]);\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        isLoading={genericLoader}\r\n        icons={tableIcons}\r\n        title=\"\"\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          padding: \"dense\",\r\n          pageSizeOptions: [data.length],\r\n          pageSize: 10,\r\n          search: false,\r\n        }}\r\n        style={{\r\n          textTransform: \"uppercase\",\r\n        }}\r\n        localization={{\r\n          header: { actions: \"\" },\r\n        }}\r\n        columns={[\r\n          {\r\n            title: \"BRAND\",\r\n            field: \"BRAND\",\r\n          },\r\n          {\r\n            title: \"MODEL\",\r\n            field: \"MODEL\",\r\n          },\r\n          {\r\n            title: \"IMEI\",\r\n            field: \"IMEI\",\r\n          },\r\n          {\r\n            title: \"DEPARTMENT\",\r\n            field: \"DEPARTMENT\",\r\n          },\r\n          {\r\n            title: \"SSO\",\r\n            field: \"SSO\",\r\n          },\r\n          {\r\n            title: \"USERNAME\",\r\n            field: \"USERNAME\",\r\n          },\r\n        ]}\r\n        data={data}\r\n        detailPanel={(rowData) => {\r\n          const index = rowData.tableData.id;\r\n          const auditDataTemp = [...inventoryAuditData];\r\n          return (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                marginBottom: \"1em\",\r\n                marginRight: \"1em\",\r\n                marginLeft: \"1em\",\r\n              }}\r\n            >\r\n              <FormControl width=\"50%\">\r\n                <FormLabel>Status</FormLabel>\r\n                <Select\r\n                  variant=\"flushed\"\r\n                  name=\"status\"\r\n                  defaultValue={inventoryAuditData[rowData.tableData.id].status}\r\n                  onChange={(e) => {\r\n                    auditDataTemp[index].status = e.target.value;\r\n                    setInventoryAuditData(auditDataTemp);\r\n                  }}\r\n                >\r\n                  <option value=\"good\">Good</option>\r\n                  <option value=\"bad\">Bad</option>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl id=\"comments\">\r\n                <FormLabel>Comments</FormLabel>\r\n                <Input\r\n                  variant=\"flushed\"\r\n                  name=\"comments\"\r\n                  defaultValue={\r\n                    inventoryAuditData[rowData.tableData.id].comments\r\n                  }\r\n                  onChange={(e) => {\r\n                    auditDataTemp[index].comments = e.target.value;\r\n                    setInventoryAuditData(auditDataTemp);\r\n                  }}\r\n                ></Input>\r\n              </FormControl>\r\n            </div>\r\n          );\r\n        }}\r\n        onRowClick={(event, rowData, togglePanel) => togglePanel()}\r\n      ></MaterialTable>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst AuditLaserPrinters = React.memo(() => {\r\n  // states\r\n  const [genericLoader, setGenericLoader] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  // context\r\n  const { heightState, inventoryAuditDataState } = useContext(ItSupportContext);\r\n  const [inventoryAuditData, setInventoryAuditData] = inventoryAuditDataState;\r\n\r\n  const [height] = heightState;\r\n  const fetchData = () => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/fetchAuditLaserPrinters.php`)\r\n      .then((response) => {\r\n        setData(response.data);\r\n        setGenericLoader(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n    setData([]);\r\n    setGenericLoader(true);\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log(inventoryAuditData);\r\n  }, [inventoryAuditData]);\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        isLoading={genericLoader}\r\n        icons={tableIcons}\r\n        title=\"\"\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          padding: \"dense\",\r\n          pageSizeOptions: [data.length],\r\n          pageSize: 10,\r\n          search: false,\r\n        }}\r\n        style={{\r\n          textTransform: \"uppercase\",\r\n        }}\r\n        localization={{\r\n          header: { actions: \"\" },\r\n        }}\r\n        columns={[\r\n          {\r\n            title: \"BRAND\",\r\n            field: \"BRAND\",\r\n          },\r\n          {\r\n            title: \"MODEL\",\r\n            field: \"MODEL\",\r\n          },\r\n          {\r\n            title: \"SERIAL NUMBER\",\r\n            field: \"SERIAL_NUMBER\",\r\n          },\r\n          {\r\n            title: \"LOCATION\",\r\n            field: \"LOCATION\",\r\n          },\r\n          {\r\n            title: \"AREA\",\r\n            field: \"AREA\",\r\n          },\r\n          {\r\n            title: \"HOSTNAME\",\r\n            field: \"HOSTNAME\",\r\n          },\r\n          {\r\n            title: \"DAHILL TAG\",\r\n            field: \"DAHILL_TAG\",\r\n          },\r\n        ]}\r\n        data={data}\r\n        detailPanel={(rowData) => {\r\n          const index = rowData.tableData.id;\r\n          const auditDataTemp = [...inventoryAuditData];\r\n          return (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                marginBottom: \"1em\",\r\n                marginRight: \"1em\",\r\n                marginLeft: \"1em\",\r\n              }}\r\n            >\r\n              <FormControl width=\"50%\">\r\n                <FormLabel>Status</FormLabel>\r\n                <Select\r\n                  variant=\"flushed\"\r\n                  name=\"status\"\r\n                  defaultValue={inventoryAuditData[rowData.tableData.id].status}\r\n                  onChange={(e) => {\r\n                    auditDataTemp[index].status = e.target.value;\r\n                    setInventoryAuditData(auditDataTemp);\r\n                  }}\r\n                >\r\n                  <option value=\"good\">Good</option>\r\n                  <option value=\"bad\">Bad</option>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl id=\"comments\">\r\n                <FormLabel>Comments</FormLabel>\r\n                <Input\r\n                  variant=\"flushed\"\r\n                  name=\"comments\"\r\n                  defaultValue={\r\n                    inventoryAuditData[rowData.tableData.id].comments\r\n                  }\r\n                  onChange={(e) => {\r\n                    auditDataTemp[index].comments = e.target.value;\r\n                    setInventoryAuditData(auditDataTemp);\r\n                  }}\r\n                ></Input>\r\n              </FormControl>\r\n            </div>\r\n          );\r\n        }}\r\n        onRowClick={(event, rowData, togglePanel) => togglePanel()}\r\n      ></MaterialTable>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst AuditLabelPrinters = React.memo(() => {\r\n  // states\r\n  const [genericLoader, setGenericLoader] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  // context\r\n  const { heightState, inventoryAuditDataState } = useContext(ItSupportContext);\r\n  const [inventoryAuditData, setInventoryAuditData] = inventoryAuditDataState;\r\n\r\n  const [height] = heightState;\r\n  const fetchData = () => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/fetchAuditLabelPrinters.php`)\r\n      .then((response) => {\r\n        setData(response.data);\r\n        setGenericLoader(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n    setData([]);\r\n    setGenericLoader(true);\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log(inventoryAuditData);\r\n  }, [inventoryAuditData]);\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        isLoading={genericLoader}\r\n        icons={tableIcons}\r\n        title=\"\"\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          padding: \"dense\",\r\n          pageSizeOptions: [data.length],\r\n          pageSize: 10,\r\n          search: false,\r\n        }}\r\n        style={{\r\n          textTransform: \"uppercase\",\r\n        }}\r\n        localization={{\r\n          header: { actions: \"\" },\r\n        }}\r\n        columns={[\r\n          {\r\n            title: \"BRAND\",\r\n            field: \"BRAND\",\r\n          },\r\n          {\r\n            title: \"MODEL\",\r\n            field: \"MODEL\",\r\n          },\r\n          {\r\n            title: \"SERIAL NUMBER\",\r\n            field: \"SERIAL_NUMBER\",\r\n          },\r\n          {\r\n            title: \"LOCATION\",\r\n            field: \"LOCATION\",\r\n          },\r\n          {\r\n            title: \"AREA\",\r\n            field: \"AREA\",\r\n          },\r\n          {\r\n            title: \"BARTENDER NAME\",\r\n            field: \"BARTENDER_NAME\",\r\n          },\r\n          {\r\n            title: \"TAG\",\r\n            field: \"TAG\",\r\n          },\r\n        ]}\r\n        data={data}\r\n        detailPanel={(rowData) => {\r\n          const index = rowData.tableData.id;\r\n          const auditDataTemp = [...inventoryAuditData];\r\n          return (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                marginBottom: \"1em\",\r\n                marginRight: \"1em\",\r\n                marginLeft: \"1em\",\r\n              }}\r\n            >\r\n              <FormControl width=\"50%\">\r\n                <FormLabel>Status</FormLabel>\r\n                <Select\r\n                  variant=\"flushed\"\r\n                  name=\"status\"\r\n                  defaultValue={inventoryAuditData[rowData.tableData.id].status}\r\n                  onChange={(e) => {\r\n                    auditDataTemp[index].status = e.target.value;\r\n                    setInventoryAuditData(auditDataTemp);\r\n                  }}\r\n                >\r\n                  <option value=\"good\">Good</option>\r\n                  <option value=\"bad\">Bad</option>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl id=\"comments\">\r\n                <FormLabel>Comments</FormLabel>\r\n                <Input\r\n                  variant=\"flushed\"\r\n                  name=\"comments\"\r\n                  defaultValue={\r\n                    inventoryAuditData[rowData.tableData.id].comments\r\n                  }\r\n                  onChange={(e) => {\r\n                    auditDataTemp[index].comments = e.target.value;\r\n                    setInventoryAuditData(auditDataTemp);\r\n                  }}\r\n                ></Input>\r\n              </FormControl>\r\n            </div>\r\n          );\r\n        }}\r\n        onRowClick={(event, rowData, togglePanel) => togglePanel()}\r\n      ></MaterialTable>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst AuditReservedIps = React.memo(() => {\r\n  // states\r\n  const [genericLoader, setGenericLoader] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  // context\r\n  const { heightState, inventoryAuditDataState } = useContext(ItSupportContext);\r\n  const [inventoryAuditData, setInventoryAuditData] = inventoryAuditDataState;\r\n\r\n  const [height] = heightState;\r\n  const fetchData = () => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/fetchAuditReservedIps.php`)\r\n      .then((response) => {\r\n        setData(response.data);\r\n        setGenericLoader(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n    setData([]);\r\n    setGenericLoader(true);\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log(inventoryAuditData);\r\n  }, [inventoryAuditData]);\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        isLoading={genericLoader}\r\n        icons={tableIcons}\r\n        title=\"\"\r\n        options={{\r\n          actionsColumnIndex: -1,\r\n          padding: \"dense\",\r\n          pageSizeOptions: [data.length],\r\n          pageSize: 10,\r\n          search: false,\r\n        }}\r\n        style={{\r\n          textTransform: \"uppercase\",\r\n        }}\r\n        localization={{\r\n          header: { actions: \"\" },\r\n        }}\r\n        columns={[\r\n          {\r\n            title: \"IP ADDRESS\",\r\n            field: \"IP_ADDRESS\",\r\n          },\r\n          {\r\n            title: \"DEVICE\",\r\n            field: \"DEVICE\",\r\n          },\r\n          {\r\n            title: \"LOCATION\",\r\n            field: \"LOCATION\",\r\n          },\r\n          {\r\n            title: \"LOCATION\",\r\n            field: \"LOCATION\",\r\n          },\r\n          {\r\n            title: \"AREA\",\r\n            field: \"AREA\",\r\n          },\r\n        ]}\r\n        data={data}\r\n        detailPanel={(rowData) => {\r\n          const index = rowData.tableData.id;\r\n          const auditDataTemp = [...inventoryAuditData];\r\n          return (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                marginBottom: \"1em\",\r\n                marginRight: \"1em\",\r\n                marginLeft: \"1em\",\r\n              }}\r\n            >\r\n              <FormControl width=\"50%\">\r\n                <FormLabel>Status</FormLabel>\r\n                <Select\r\n                  variant=\"flushed\"\r\n                  name=\"status\"\r\n                  defaultValue={inventoryAuditData[rowData.tableData.id].status}\r\n                  onChange={(e) => {\r\n                    auditDataTemp[index].status = e.target.value;\r\n                    setInventoryAuditData(auditDataTemp);\r\n                  }}\r\n                >\r\n                  <option value=\"good\">Good</option>\r\n                  <option value=\"bad\">Bad</option>\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl id=\"comments\">\r\n                <FormLabel>Comments</FormLabel>\r\n                <Input\r\n                  variant=\"flushed\"\r\n                  name=\"comments\"\r\n                  defaultValue={\r\n                    inventoryAuditData[rowData.tableData.id].comments\r\n                  }\r\n                  onChange={(e) => {\r\n                    auditDataTemp[index].comments = e.target.value;\r\n                    setInventoryAuditData(auditDataTemp);\r\n                  }}\r\n                ></Input>\r\n              </FormControl>\r\n            </div>\r\n          );\r\n        }}\r\n        onRowClick={(event, rowData, togglePanel) => togglePanel()}\r\n      ></MaterialTable>\r\n    </div>\r\n  );\r\n});\r\nexport const indexAudit = {\r\n  desktops: <AuditDesktops />,\r\n  laptops: <AuditLaptops />,\r\n  mobiles: <AuditMobiles />,\r\n  laser_printers: <AuditLaserPrinters />,\r\n  label_printers: <AuditLabelPrinters />,\r\n  reserved_ips: <AuditReservedIps />,\r\n};\r\n","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\commentsForm.js",["174"],"import React, { useEffect, useContext } from \"react\";\r\nimport { ItSupportContext } from \"../resources/ItSupportContext\";\r\nimport { Textarea } from \"@chakra-ui/react\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nconst CommentsDesktopsForm = React.memo(() => {\r\n  const { inventoryCommentsDataState } = useContext(ItSupportContext);\r\n  const [\r\n    inventoryCommentsData,\r\n    setInventoryCommentsData,\r\n  ] = inventoryCommentsDataState;\r\n  useEffect(() => {\r\n    console.log(inventoryCommentsData);\r\n  }, [inventoryCommentsData]);\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        height: \"100%\",\r\n      }}\r\n    >\r\n      <span style={{ fontSize: \"1.1em\", color: \"gray\", marginBottom: \"1em\" }}>\r\n        Comments\r\n      </span>\r\n      <div style={{ display: \"flex\", marginBottom: \"1em\" }}>\r\n        <Textarea\r\n          defaultValue={inventoryCommentsData.comment}\r\n          onChange={(e) => {\r\n            inventoryCommentsData.comment = e.target.value;\r\n            setInventoryCommentsData(inventoryCommentsData);\r\n          }}\r\n        ></Textarea>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport const indexComments = {\r\n  desktops: <CommentsDesktopsForm />,\r\n  // laptops: <CommentsLaptopsForm />,\r\n  // mobiles: <CommentsMobilesForm />,\r\n  // laser_printers: <CommentsLabelPrintersForm />,\r\n  // label_printers: <CommentsLaserPrintersForm />,\r\n  // reserved_ips: <CommentsReservedIpsForm />,\r\n};\r\n","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\qatest\\screens\\Ops.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\qatest\\index.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\desktopsTable.js",["175","176","177","178","179"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { ItSupportContext } from \"../resources/ItSupportContext\";\r\nimport MaterialTable from \"material-table\";\r\nimport { tableIcons } from \"../resources/tableIcons\";\r\nimport LibraryAddIcon from \"@material-ui/icons/LibraryAdd\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport { Grid, GridItem, Text, IconButton } from \"@chakra-ui/react\";\r\nimport { CheckIcon, CloseIcon, EditIcon } from \"@chakra-ui/icons\";\r\nimport axios from \"axios\";\r\nimport { USELPUTIL02 } from \"../../../_resources/serverRoutes\";\r\nconst DesktopsTable = React.memo(() => {\r\n  // states\r\n  const [genericLoader, setGenericLoader] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  // context\r\n  const {\r\n    addDrawerVisibilityState,\r\n    heightState,\r\n    auditModalVisibilityState,\r\n    inventoryAuditDataState,\r\n    commentsDrawerVisibilityState,\r\n    inventoryCommentsDataState,\r\n  } = useContext(ItSupportContext);\r\n\r\n  const [inventoryAuditData, setInventoryAuditData] = inventoryAuditDataState;\r\n  const [height] = heightState;\r\n  const [, setAddDrawerVisibility] = addDrawerVisibilityState;\r\n  const [, setAuditModalVisibility] = auditModalVisibilityState;\r\n  const [, setCommentsDrawerVisibility] = commentsDrawerVisibilityState;\r\n  const [\r\n    inventoryCommentsData,\r\n    setInventoryCommentsData,\r\n  ] = inventoryCommentsDataState;\r\n  // functions\r\n  let jsonSpecs = [];\r\n  function isJSON(item) {\r\n    item = typeof item !== \"string\" ? JSON.stringify(item) : item;\r\n\r\n    try {\r\n      item = JSON.parse(item);\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n\r\n    if (typeof item === \"object\" && item !== null) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  const fetchData = () => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/fetchDesktops.php`)\r\n      .then((response) => {\r\n        response.data.forEach((data, i) => {\r\n          jsonSpecs[i] = data.SPECS;\r\n          let specs = isJSON(data.SPECS);\r\n          if (specs == true) {\r\n            data.SPECS =\r\n              JSON.parse(data.SPECS).hdd +\r\n              \"/\" +\r\n              JSON.parse(data.SPECS).ram +\r\n              \"/\" +\r\n              JSON.parse(data.SPECS).processor;\r\n          }\r\n        });\r\n        console.log(jsonSpecs);\r\n        setData(response.data);\r\n        setGenericLoader(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const AddItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/addItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const EditItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/editItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const DeleteItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/deleteItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  // effects\r\n  useEffect(() => {\r\n    fetchData();\r\n    setData([]);\r\n    setGenericLoader(true);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <MaterialTable\r\n      isLoading={genericLoader}\r\n      icons={tableIcons}\r\n      title=\"Desktops\"\r\n      options={{\r\n        actionsColumnIndex: -1,\r\n        padding: \"dense\",\r\n        toolbar: true,\r\n        search: true,\r\n        headerStyle: { position: \"sticky\", top: 0 },\r\n        pageSizeOptions: [20, 50, 100, data.length],\r\n        pageSize: 20,\r\n        minBodyHeight: height - 145,\r\n        maxBodyHeight: height - 145,\r\n        exportButton: true,\r\n        addRowPosition: \"first\",\r\n      }}\r\n      style={{\r\n        textTransform: \"uppercase\",\r\n      }}\r\n      localization={{\r\n        header: { actions: \"\" },\r\n      }}\r\n      actions={[\r\n        {\r\n          icon: LibraryAddIcon,\r\n          tooltip: \"Add Multiple\",\r\n          isFreeAction: \"true\",\r\n          onClick: () => {\r\n            setAddDrawerVisibility(true);\r\n          },\r\n        },\r\n        {\r\n          icon: VisibilityIcon,\r\n          tooltip: \"Audit\",\r\n          isFreeAction: \"true\",\r\n          onClick: () => {\r\n            setAuditModalVisibility(true);\r\n          },\r\n        },\r\n      ]}\r\n      columns={[\r\n        {\r\n          title: \"BRAND\",\r\n          field: \"BRAND\",\r\n        },\r\n        {\r\n          title: \"MODEL\",\r\n          field: \"MODEL\",\r\n        },\r\n        {\r\n          title: \"SERVICE TAG\",\r\n          field: \"SERVICE_TAG\",\r\n        },\r\n        {\r\n          title: \"LOCATION\",\r\n          field: \"LOCATION\",\r\n        },\r\n        {\r\n          title: \"AREA\",\r\n          field: \"AREA\",\r\n        },\r\n        {\r\n          title: \"OS\",\r\n          field: \"OS\",\r\n        },\r\n        {\r\n          title: \"SPECS\",\r\n          field: \"SPECS\",\r\n          editPlaceholder: \"HDD/RAM/PROCESSOR\",\r\n        },\r\n        {\r\n          title: \"HOSTNAME\",\r\n          field: \"HOSTNAME\",\r\n          editable: \"onUpdate\",\r\n        },\r\n        {\r\n          title: \"COUNTRY\",\r\n          field: \"COUNTRY\",\r\n        },\r\n        {\r\n          title: \"USERNAME\",\r\n          field: \"USERNAME\",\r\n        },\r\n      ]}\r\n      data={data}\r\n      editable={{\r\n        onRowAdd: (newData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              newData.section = \"desktops\";\r\n              newData.count = 1;\r\n              newData.HOSTNAME = \"G\" + newData.SERVICE_TAG + \"E\";\r\n              var date = new Date().toJSON().slice(0, 10).replace(/-/g, \"/\");\r\n              newData.ADDED = date;\r\n              newData.AUDITED = `{\"status\":\"\", \"comments\":\"\"}`;\r\n              let specsSplit = newData.SPECS.replace(/\\s/g, \"\")\r\n                .replace(/-|\\\\|\\|/g, \"/\")\r\n                .split(`/`);\r\n              console.log(specsSplit);\r\n              newData.SPECS = `{\"hdd\":\"${specsSplit[0]}\", \"ram\":\"${specsSplit[1]}\", \"processor\":\"${specsSplit[2]}\", \"screenSize\":\"\"}`;\r\n              console.log(newData.SPECS);\r\n              AddItem(newData);\r\n\r\n              newData.SPECS = `${specsSplit[0]}/${specsSplit[1]}/${specsSplit[2]}`;\r\n              setData([newData, ...data]);\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataUpdate = [...data];\r\n              const index = oldData.tableData.id;\r\n              newData.section = \"desktops\";\r\n              var date = new Date().toJSON().slice(0, 10).replace(/-/g, \"/\");\r\n              let specsSplit = newData.SPECS.replace(/\\s/g, \"\")\r\n                .replace(/-|\\\\|\\|/g, \"/\")\r\n                .split(`/`);\r\n              console.log(specsSplit);\r\n              newData.SPECS = `{\"hdd\":\"${specsSplit[0]}\", \"ram\":\"${specsSplit[1]}\", \"processor\":\"${specsSplit[2]}\", \"screenSize\":\"\"}`;\r\n              newData.LAST_MODIFICATION = date;\r\n              console.log(newData);\r\n              EditItem(newData);\r\n              dataUpdate[index] = newData;\r\n              newData.SPECS = `${specsSplit[0]}/${specsSplit[1]}/${specsSplit[2]}`;\r\n              setData(dataUpdate);\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n        onRowDelete: (oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataDelete = [...data];\r\n              const index = oldData.tableData.id;\r\n              dataDelete.splice(index, 1);\r\n              oldData.section = \"desktops\";\r\n              DeleteItem(oldData);\r\n              setData(dataDelete);\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n      }}\r\n      detailPanel={(rowData) => {\r\n        return (\r\n          <Grid\r\n            h=\"90px\"\r\n            templateRows=\"repeat(3, 1fr)\"\r\n            templateColumns=\"repeat(6, 1fr)\"\r\n            gap={0}\r\n          >\r\n            <GridItem colSpan={1} border=\"1px\" borderColor=\"lightgray\">\r\n              <Text\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                fontSize=\"sm\"\r\n              >\r\n                Date Added:\r\n              </Text>\r\n            </GridItem>\r\n            <GridItem colSpan={1} border=\"1px\" borderColor=\"lightgray\">\r\n              <Text\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                fontSize=\"sm\"\r\n              >\r\n                {rowData.ADDED}\r\n              </Text>\r\n            </GridItem>\r\n            <GridItem colSpan={1} border=\"1px\" borderColor=\"lightgray\">\r\n              <Text\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                fontSize=\"sm\"\r\n              >\r\n                Comments:\r\n              </Text>\r\n            </GridItem>\r\n            <GridItem colSpan={3} border=\"1px\" borderColor=\"lightgray\">\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <Text\r\n                  width=\"100%\"\r\n                  height=\"80%\"\r\n                  display=\"flex\"\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\"\r\n                  fontSize=\"sm\"\r\n                >\r\n                  {rowData.COMMENTS}\r\n                </Text>\r\n                <IconButton\r\n                  size=\"sm\"\r\n                  icon={<EditIcon />}\r\n                  onClick={() => {\r\n                    setCommentsDrawerVisibility(true);\r\n                    setInventoryCommentsData({\r\n                      comment: rowData.COMMENTS,\r\n                      serialnumber: rowData.SERVICE_TAG,\r\n                    });\r\n                    console.log(inventoryCommentsData);\r\n                  }}\r\n                />\r\n              </div>\r\n            </GridItem>\r\n            <GridItem colSpan={1} border=\"1px\" borderColor=\"lightgray\">\r\n              <Text\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                fontSize=\"sm\"\r\n              >\r\n                Date Modified:\r\n              </Text>\r\n            </GridItem>\r\n            <GridItem colSpan={1} border=\"1px\" borderColor=\"lightgray\">\r\n              <Text\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                fontSize=\"sm\"\r\n              >\r\n                {rowData.LAST_MODIFICATION}\r\n              </Text>\r\n            </GridItem>\r\n            <GridItem colSpan={1} border=\"1px\" borderColor=\"lightgray\">\r\n              <Text\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                fontSize=\"sm\"\r\n              >\r\n                Audit Results:\r\n              </Text>\r\n            </GridItem>\r\n            <GridItem colSpan={1} border=\"1px\" borderColor=\"lightgray\">\r\n              <Text\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                fontSize=\"sm\"\r\n              >\r\n                {JSON.parse(rowData.AUDITED).status}\r\n              </Text>\r\n            </GridItem>\r\n            <GridItem colSpan={2} border=\"1px\" borderColor=\"lightgray\">\r\n              <Text\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                fontSize=\"sm\"\r\n              >\r\n                {JSON.parse(rowData.AUDITED).comments}\r\n              </Text>\r\n            </GridItem>\r\n            <GridItem colSpan={1} border=\"1px\" borderColor=\"lightgray\">\r\n              <Text\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                fontSize=\"sm\"\r\n              >\r\n                HDD:\r\n              </Text>\r\n            </GridItem>\r\n            <GridItem colSpan={1} border=\"1px\" borderColor=\"lightgray\">\r\n              <Text\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                fontSize=\"sm\"\r\n              >\r\n                {rowData.SPECS.split(\"/\")[0]}\r\n              </Text>\r\n            </GridItem>\r\n            <GridItem colSpan={1} border=\"1px\" borderColor=\"lightgray\">\r\n              <Text\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                fontSize=\"sm\"\r\n              >\r\n                RAM:\r\n              </Text>\r\n            </GridItem>\r\n            <GridItem colSpan={1} border=\"1px\" borderColor=\"lightgray\">\r\n              <Text\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                fontSize=\"sm\"\r\n              >\r\n                {rowData.SPECS.split(\"/\")[1]}\r\n              </Text>\r\n            </GridItem>\r\n            <GridItem colSpan={1} border=\"1px\" borderColor=\"lightgray\">\r\n              <Text\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                fontSize=\"sm\"\r\n              >\r\n                PROCESSOR:\r\n              </Text>\r\n            </GridItem>\r\n            <GridItem colSpan={1} border=\"1px\" borderColor=\"lightgray\">\r\n              <Text\r\n                width=\"100%\"\r\n                height=\"100%\"\r\n                display=\"flex\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                fontSize=\"sm\"\r\n              >\r\n                {rowData.SPECS.split(\"/\")[2]}\r\n              </Text>\r\n            </GridItem>\r\n          </Grid>\r\n        );\r\n      }}\r\n    ></MaterialTable>\r\n  );\r\n});\r\nexport default DesktopsTable;\r\n","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\tableIcons.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\ItSupportContext.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\sectionTitles.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\screens\\Inventory.js",["180","181"],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\screens\\Miscellaneous.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\inventoryColumns.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\index.js",[],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\reservedIpsTable.js",["182"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { ItSupportContext } from \"../resources/ItSupportContext\";\r\nimport MaterialTable from \"material-table\";\r\nimport { tableIcons } from \"../resources/tableIcons\";\r\nimport LibraryAddIcon from \"@material-ui/icons/LibraryAdd\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport axios from \"axios\";\r\nimport { USELPUTIL02 } from \"../../../_resources/serverRoutes\";\r\nconst ReservedIpsTable = React.memo(() => {\r\n  // states\r\n  const [genericLoader, setGenericLoader] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  // context\r\n  const {\r\n    addDrawerVisibilityState,\r\n    heightState,\r\n    auditModalVisibilityState,\r\n    inventoryAuditDataState,\r\n  } = useContext(ItSupportContext);\r\n  const [inventoryAuditData, setInventoryAuditData] = inventoryAuditDataState;\r\n  const [, setAddDrawerVisibility] = addDrawerVisibilityState;\r\n  const [height] = heightState;\r\n  const [, setAuditModalVisibility] = auditModalVisibilityState;\r\n  // functions\r\n  const fetchData = () => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/fetchIps.php`)\r\n      .then((response) => {\r\n        setData(response.data);\r\n        setGenericLoader(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const AddItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/addItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const EditItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/editItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const DeleteItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/deleteItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  // effects\r\n  useEffect(() => {\r\n    fetchData();\r\n    setData([]);\r\n    setGenericLoader(true);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <MaterialTable\r\n      isLoading={genericLoader}\r\n      icons={tableIcons}\r\n      title=\"Reserved IP's\"\r\n      options={{\r\n        actionsColumnIndex: -1,\r\n        padding: \"dense\",\r\n        toolbar: true,\r\n        search: true,\r\n        headerStyle: { position: \"sticky\", top: 0 },\r\n        pageSizeOptions: [20, 50, 100, data.length],\r\n        pageSize: 20,\r\n        minBodyHeight: height - 145,\r\n        maxBodyHeight: height - 145,\r\n        exportButton: true,\r\n        addRowPosition: \"first\",\r\n      }}\r\n      style={{\r\n        textTransform: \"uppercase\",\r\n      }}\r\n      localization={{\r\n        header: { actions: \"\" },\r\n      }}\r\n      actions={[\r\n        {\r\n          icon: LibraryAddIcon,\r\n          tooltip: \"Add Multiple\",\r\n          isFreeAction: \"true\",\r\n          onClick: () => {\r\n            setAddDrawerVisibility(true);\r\n          },\r\n        },\r\n        {\r\n          icon: VisibilityIcon,\r\n          tooltip: \"Audit\",\r\n          isFreeAction: \"true\",\r\n          onClick: () => {\r\n            setAuditModalVisibility(true);\r\n            console.log(inventoryAuditData);\r\n          },\r\n        },\r\n      ]}\r\n      columns={[\r\n        {\r\n          title: \"IP ADDRESS\",\r\n          field: \"IP_ADDRESS\",\r\n        },\r\n        {\r\n          title: \"DEVICE\",\r\n          field: \"DEVICE\",\r\n        },\r\n        {\r\n          title: \"LOCATION\",\r\n          field: \"LOCATION\",\r\n        },\r\n        {\r\n          title: \"AREA\",\r\n          field: \"AREA\",\r\n        },\r\n      ]}\r\n      data={data}\r\n      editable={{\r\n        onRowAdd: (newData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              newData.section = \"reservedIps\";\r\n              newData.count = 1;\r\n              AddItem(newData);\r\n              setData([newData, ...data]);\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataUpdate = [...data];\r\n              const index = oldData.tableData.id;\r\n              newData.section = \"reservedIps\";\r\n              dataUpdate[index] = newData;\r\n              console.log(newData);\r\n              EditItem(newData);\r\n              setData(dataUpdate);\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n        onRowDelete: (oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataDelete = [...data];\r\n              const index = oldData.tableData.id;\r\n              dataDelete.splice(index, 1);\r\n              oldData.section = \"reservedIps\";\r\n              DeleteItem(oldData);\r\n              setData(dataDelete);\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n      }}\r\n    ></MaterialTable>\r\n  );\r\n});\r\nexport default ReservedIpsTable;\r\n","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\mobilesTable.js",["183"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { ItSupportContext } from \"../resources/ItSupportContext\";\r\nimport MaterialTable from \"material-table\";\r\nimport { tableIcons } from \"../resources/tableIcons\";\r\nimport { PictureAsPdf } from \"@material-ui/icons\";\r\nimport LibraryAddIcon from \"@material-ui/icons/LibraryAdd\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport axios from \"axios\";\r\nimport { USELPUTIL02 } from \"../../../_resources/serverRoutes\";\r\nexport const MobilesTable = React.memo(() => {\r\n  // states\r\n  const [genericLoader, setGenericLoader] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  // context\r\n  const {\r\n    addDrawerVisibilityState,\r\n    heightState,\r\n    auditModalVisibilityState,\r\n    inventoryAuditDataState,\r\n  } = useContext(ItSupportContext);\r\n  const [inventoryAuditData, setInventoryAuditData] = inventoryAuditDataState;\r\n  const [, setAddDrawerVisibility] = addDrawerVisibilityState;\r\n  const [height] = heightState;\r\n  const [, setAuditModalVisibility] = auditModalVisibilityState;\r\n  // functions\r\n  const fetchData = () => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/fetchMobiles.php`)\r\n      .then((response) => {\r\n        setData(response.data);\r\n        setGenericLoader(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const AddItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/addItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const EditItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/editItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const DeleteItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/deleteItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const PrintPDF = (values) => {\r\n    if (values.section === \"laptop\") {\r\n      axios\r\n        .post(`${USELPUTIL02}/itsupport/pdf/pdf_laptop.php`, values, {\r\n          responseType: \"arraybuffer\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/pdf\",\r\n          },\r\n        })\r\n        .then((response) => {\r\n          const url = window.URL.createObjectURL(new Blob([response.data]));\r\n          const link = document.createElement(\"a\");\r\n          link.href = url;\r\n          link.setAttribute(\"download\", `${values.SSO}-${values.section}.pdf`); //or any other extension\r\n          document.body.appendChild(link);\r\n          link.click();\r\n        })\r\n        .catch((error) => console.log(error));\r\n    } else {\r\n      axios\r\n        .post(`${USELPUTIL02}/itsupport/pdf/pdf_mobile.php`, values, {\r\n          responseType: \"arraybuffer\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/pdf\",\r\n          },\r\n        })\r\n        .then((response) => {\r\n          const url = window.URL.createObjectURL(new Blob([response.data]));\r\n          const link = document.createElement(\"a\");\r\n          link.href = url;\r\n          link.setAttribute(\"download\", `${values.SSO}-${values.section}.pdf`); //or any other extension\r\n          document.body.appendChild(link);\r\n          link.click();\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n  // effects\r\n  useEffect(() => {\r\n    fetchData();\r\n    setData([]);\r\n    setGenericLoader(true);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <MaterialTable\r\n      isLoading={genericLoader}\r\n      icons={tableIcons}\r\n      title=\"Mobiles\"\r\n      options={{\r\n        actionsColumnIndex: -1,\r\n        padding: \"dense\",\r\n        toolbar: true,\r\n        search: true,\r\n        headerStyle: { position: \"sticky\", top: 0 },\r\n        pageSizeOptions: [20, 50, 100, data.length],\r\n        pageSize: 20,\r\n        minBodyHeight: height - 145,\r\n        maxBodyHeight: height - 145,\r\n        exportButton: true,\r\n        addRowPosition: \"first\",\r\n      }}\r\n      style={{\r\n        textTransform: \"uppercase\",\r\n      }}\r\n      localization={{\r\n        header: { actions: \"\" },\r\n      }}\r\n      actions={[\r\n        {\r\n          icon: PictureAsPdf,\r\n          tooltip: \"Print PDF\",\r\n          onClick: (event, dataRow) => {\r\n            dataRow.section = \"mobile\";\r\n            PrintPDF(dataRow);\r\n          },\r\n        },\r\n        {\r\n          icon: LibraryAddIcon,\r\n          tooltip: \"Add Multiple\",\r\n          isFreeAction: \"true\",\r\n          onClick: () => {\r\n            setAddDrawerVisibility(true);\r\n          },\r\n        },\r\n        {\r\n          icon: VisibilityIcon,\r\n          tooltip: \"Audit\",\r\n          isFreeAction: \"true\",\r\n          onClick: () => {\r\n            setAuditModalVisibility(true);\r\n            console.log(inventoryAuditData);\r\n          },\r\n        },\r\n      ]}\r\n      columns={[\r\n        {\r\n          title: \"BRAND\",\r\n          field: \"BRAND\",\r\n        },\r\n        {\r\n          title: \"MODEL\",\r\n          field: \"MODEL\",\r\n        },\r\n        {\r\n          title: \"IMEI\",\r\n          field: \"IMEI\",\r\n        },\r\n        {\r\n          title: \"SSO\",\r\n          field: \"SSO\",\r\n        },\r\n        {\r\n          title: \"USERNAME\",\r\n          field: \"USERNAME\",\r\n        },\r\n        {\r\n          title: \"DEPARTMENT\",\r\n          field: \"DEPARTMENT\",\r\n        },\r\n        {\r\n          title: \"COLOR\",\r\n          field: \"COLOR\",\r\n        },\r\n        {\r\n          title: \"SPECS\",\r\n          field: \"SPECS\",\r\n        },\r\n        {\r\n          title: \"TEL NUMBER\",\r\n          field: \"TEL_NUMBER\",\r\n        },\r\n      ]}\r\n      data={data}\r\n      editable={{\r\n        onRowAdd: (newData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              newData.section = \"mobiles\";\r\n              newData.count = 1;\r\n              newData.Hostname = \"G\" + newData.ServiceTag + \"E\";\r\n              AddItem(newData);\r\n              setData([newData, ...data]);\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataUpdate = [...data];\r\n              const index = oldData.tableData.id;\r\n              newData.section = \"mobiles\";\r\n              dataUpdate[index] = newData;\r\n              console.log(newData);\r\n              EditItem(newData);\r\n              setData(dataUpdate);\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n        onRowDelete: (oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataDelete = [...data];\r\n              const index = oldData.tableData.id;\r\n              dataDelete.splice(index, 1);\r\n              oldData.section = \"mobiles\";\r\n              DeleteItem(oldData);\r\n              setData(dataDelete);\r\n\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n      }}\r\n    ></MaterialTable>\r\n  );\r\n});\r\nexport default MobilesTable;\r\n","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\laserPrintersTable.js",["184"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { ItSupportContext } from \"../resources/ItSupportContext\";\r\nimport MaterialTable from \"material-table\";\r\nimport { tableIcons } from \"../resources/tableIcons\";\r\nimport LibraryAddIcon from \"@material-ui/icons/LibraryAdd\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport axios from \"axios\";\r\nimport { USELPUTIL02 } from \"../../../_resources/serverRoutes\";\r\nconst LaserPrintersTable = React.memo(() => {\r\n  // states\r\n  const [genericLoader, setGenericLoader] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  // context\r\n  const {\r\n    addDrawerVisibilityState,\r\n    heightState,\r\n    auditModalVisibilityState,\r\n    inventoryAuditDataState,\r\n  } = useContext(ItSupportContext);\r\n  const [inventoryAuditData, setInventoryAuditData] = inventoryAuditDataState;\r\n  const [, setAddDrawerVisibility] = addDrawerVisibilityState;\r\n  const [height] = heightState;\r\n  const [, setAuditModalVisibility] = auditModalVisibilityState;\r\n  // functions\r\n  const fetchData = () => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/fetchLaserPrinters.php`)\r\n      .then((response) => {\r\n        setData(response.data);\r\n        setGenericLoader(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const AddItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/addItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const EditItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/editItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const DeleteItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/deleteItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  // states\r\n  useEffect(() => {\r\n    fetchData();\r\n    setData([]);\r\n    setGenericLoader(true);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <MaterialTable\r\n      isLoading={genericLoader}\r\n      icons={tableIcons}\r\n      title=\"Laser Printers\"\r\n      options={{\r\n        actionsColumnIndex: -1,\r\n        padding: \"dense\",\r\n        toolbar: true,\r\n        search: true,\r\n        headerStyle: { position: \"sticky\", top: 0 },\r\n        pageSizeOptions: [20, 50, 100, data.length],\r\n        pageSize: 20,\r\n        minBodyHeight: height - 145,\r\n        maxBodyHeight: height - 145,\r\n        exportButton: true,\r\n        addRowPosition: \"first\",\r\n      }}\r\n      style={{\r\n        textTransform: \"uppercase\",\r\n      }}\r\n      localization={{\r\n        header: { actions: \"\" },\r\n      }}\r\n      actions={[\r\n        {\r\n          icon: LibraryAddIcon,\r\n          tooltip: \"Add Multiple\",\r\n          isFreeAction: \"true\",\r\n          onClick: () => {\r\n            setAddDrawerVisibility(true);\r\n          },\r\n        },\r\n        {\r\n          icon: VisibilityIcon,\r\n          tooltip: \"Audit\",\r\n          isFreeAction: \"true\",\r\n          onClick: () => {\r\n            setAuditModalVisibility(true);\r\n            console.log(inventoryAuditData);\r\n          },\r\n        },\r\n      ]}\r\n      columns={[\r\n        {\r\n          title: \"BRAND\",\r\n          field: \"BRAND\",\r\n        },\r\n        {\r\n          title: \"MODEL\",\r\n          field: \"MODEL\",\r\n        },\r\n        {\r\n          title: \"SERIAL NUMBER\",\r\n          field: \"SERIAL_NUMBER\",\r\n        },\r\n        {\r\n          title: \"LOCATION\",\r\n          field: \"LOCATION\",\r\n        },\r\n        {\r\n          title: \"AREA\",\r\n          field: \"AREA\",\r\n        },\r\n        {\r\n          title: \"DAHILL TAG\",\r\n          field: \"DAHILL_TAG\",\r\n        },\r\n        {\r\n          title: \"HOSTNAME\",\r\n          field: \"HOSTNAME\",\r\n        },\r\n        {\r\n          title: \"IP ADDRESS\",\r\n          field: \"IP_ADDRESS\",\r\n        },\r\n      ]}\r\n      data={data}\r\n      editable={{\r\n        onRowAdd: (newData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              newData.section = \"laser_printers\";\r\n              newData.count = 1;\r\n              AddItem(newData);\r\n              setData([newData, ...data]);\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataUpdate = [...data];\r\n              const index = oldData.tableData.id;\r\n              newData.section = \"laser_printers\";\r\n              dataUpdate[index] = newData;\r\n              console.log(newData);\r\n              EditItem(newData);\r\n              setData(dataUpdate);\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n        onRowDelete: (oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataDelete = [...data];\r\n              const index = oldData.tableData.id;\r\n              dataDelete.splice(index, 1);\r\n              oldData.section = \"laser_printers\";\r\n              DeleteItem(oldData);\r\n              setData(dataDelete);\r\n\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n      }}\r\n    ></MaterialTable>\r\n  );\r\n});\r\nexport default LaserPrintersTable;\r\n","C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\laptopsTable.js",["185","186","187","188","189"],"C:\\Users\\212771640\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\labelPrintersTable.js",["190"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { ItSupportContext } from \"../resources/ItSupportContext\";\r\nimport MaterialTable from \"material-table\";\r\nimport { tableIcons } from \"../resources/tableIcons\";\r\nimport LibraryAddIcon from \"@material-ui/icons/LibraryAdd\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport axios from \"axios\";\r\nimport { USELPUTIL02 } from \"../../../_resources/serverRoutes\";\r\nconst LabelPrintersTable = React.memo(() => {\r\n  // states\r\n  const [genericLoader, setGenericLoader] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  // context\r\n  const {\r\n    addDrawerVisibilityState,\r\n    heightState,\r\n    auditModalVisibilityState,\r\n    inventoryAuditDataState,\r\n  } = useContext(ItSupportContext);\r\n  const [inventoryAuditData, setInventoryAuditData] = inventoryAuditDataState;\r\n  const [, setAddDrawerVisibility] = addDrawerVisibilityState;\r\n  const [height] = heightState;\r\n  const [, setAuditModalVisibility] = auditModalVisibilityState;\r\n  // functions\r\n  const AddItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/addItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const EditItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/editItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const DeleteItem = (values) => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/deleteItem.php`, values)\r\n      .then((response) => console.log(response.data))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const fetchData = () => {\r\n    axios\r\n      .post(`${USELPUTIL02}/itsupport/fetchLabelPrinters.php`)\r\n      .then((response) => {\r\n        setData(response.data);\r\n        setGenericLoader(false);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n  // effects\r\n  useEffect(() => {\r\n    fetchData();\r\n    setData([]);\r\n    setGenericLoader(true);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <MaterialTable\r\n      isLoading={genericLoader}\r\n      icons={tableIcons}\r\n      title=\"Label Printers\"\r\n      options={{\r\n        actionsColumnIndex: -1,\r\n        padding: \"dense\",\r\n        toolbar: true,\r\n        search: true,\r\n        headerStyle: { position: \"sticky\", top: 0 },\r\n        pageSizeOptions: [20, 50, 100, data.length],\r\n        pageSize: 20,\r\n        minBodyHeight: height - 145,\r\n        maxBodyHeight: height - 145,\r\n        exportButton: true,\r\n        addRowPosition: \"first\",\r\n      }}\r\n      style={{\r\n        textTransform: \"uppercase\",\r\n      }}\r\n      localization={{\r\n        header: { actions: \"\" },\r\n      }}\r\n      actions={[\r\n        {\r\n          icon: LibraryAddIcon,\r\n          tooltip: \"Add Multiple\",\r\n          isFreeAction: \"true\",\r\n          onClick: () => {\r\n            setAddDrawerVisibility(true);\r\n          },\r\n        },\r\n        {\r\n          icon: VisibilityIcon,\r\n          tooltip: \"Audit\",\r\n          isFreeAction: \"true\",\r\n          onClick: () => {\r\n            setAuditModalVisibility(true);\r\n            console.log(inventoryAuditData);\r\n          },\r\n        },\r\n      ]}\r\n      columns={[\r\n        {\r\n          title: \"BRAND\",\r\n          field: \"BRAND\",\r\n        },\r\n        {\r\n          title: \"MODEL\",\r\n          field: \"MODEL\",\r\n        },\r\n        {\r\n          title: \"SERIAL NUMBER\",\r\n          field: \"SERIAL_NUMBER\",\r\n        },\r\n        {\r\n          title: \"LOCATION\",\r\n          field: \"LOCATION\",\r\n        },\r\n        {\r\n          title: \"AREA\",\r\n          field: \"AREA\",\r\n        },\r\n        {\r\n          title: \"TAG\",\r\n          field: \"TAG\",\r\n        },\r\n        {\r\n          title: \"BARTENDER NAME\",\r\n          field: \"BARTENDER_NAME\",\r\n        },\r\n        {\r\n          title: \"IP ADDRESS\",\r\n          field: \"IP_ADDRESS\",\r\n        },\r\n      ]}\r\n      data={data}\r\n      editable={{\r\n        onRowAdd: (newData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              newData.section = \"label_printers\";\r\n              newData.count = 1;\r\n              AddItem(newData);\r\n              setData([newData, ...data]);\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataUpdate = [...data];\r\n              const index = oldData.tableData.id;\r\n              newData.section = \"label_printers\";\r\n              dataUpdate[index] = newData;\r\n              console.log(newData);\r\n              EditItem(newData);\r\n              setData(dataUpdate);\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n        onRowDelete: (oldData) =>\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n              const dataDelete = [...data];\r\n              const index = oldData.tableData.id;\r\n              dataDelete.splice(index, 1);\r\n              oldData.section = \"label_printers\";\r\n              DeleteItem(oldData);\r\n              setData(dataDelete);\r\n              resolve();\r\n            }, 1000);\r\n          }),\r\n      }}\r\n    ></MaterialTable>\r\n  );\r\n});\r\nexport default LabelPrintersTable;\r\n",{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","severity":1,"message":"196","line":2,"column":10,"nodeType":"197","messageId":"198","endLine":2,"endColumn":14},{"ruleId":"195","severity":1,"message":"199","line":2,"column":16,"nodeType":"197","messageId":"198","endLine":2,"endColumn":24},{"ruleId":"195","severity":1,"message":"200","line":12,"column":8,"nodeType":"197","messageId":"198","endLine":12,"endColumn":21},{"ruleId":"195","severity":1,"message":"201","line":14,"column":8,"nodeType":"197","messageId":"198","endLine":14,"endColumn":24},{"ruleId":"195","severity":1,"message":"202","line":15,"column":8,"nodeType":"197","messageId":"198","endLine":15,"endColumn":25},{"ruleId":"195","severity":1,"message":"203","line":18,"column":8,"nodeType":"197","messageId":"198","endLine":18,"endColumn":17},{"ruleId":"195","severity":1,"message":"204","line":4,"column":18,"nodeType":"197","messageId":"198","endLine":4,"endColumn":27},{"ruleId":"195","severity":1,"message":"205","line":856,"column":5,"nodeType":"197","messageId":"198","endLine":856,"endColumn":13},{"ruleId":"195","severity":1,"message":"206","line":862,"column":10,"nodeType":"197","messageId":"198","endLine":862,"endColumn":18},{"ruleId":"195","severity":1,"message":"207","line":863,"column":10,"nodeType":"197","messageId":"198","endLine":863,"endColumn":23},{"ruleId":"195","severity":1,"message":"208","line":868,"column":10,"nodeType":"197","messageId":"198","endLine":868,"endColumn":20},{"ruleId":"195","severity":1,"message":"209","line":869,"column":10,"nodeType":"197","messageId":"198","endLine":869,"endColumn":21},{"ruleId":"195","severity":1,"message":"210","line":870,"column":9,"nodeType":"197","messageId":"198","endLine":870,"endColumn":25},{"ruleId":"195","severity":1,"message":"211","line":17,"column":10,"nodeType":"197","messageId":"198","endLine":17,"endColumn":16},{"ruleId":"212","severity":1,"message":"213","line":34,"column":6,"nodeType":"214","endLine":34,"endColumn":8,"suggestions":"215"},{"ruleId":"195","severity":1,"message":"211","line":146,"column":10,"nodeType":"197","messageId":"198","endLine":146,"endColumn":16},{"ruleId":"195","severity":1,"message":"211","line":272,"column":10,"nodeType":"197","messageId":"198","endLine":272,"endColumn":16},{"ruleId":"195","severity":1,"message":"211","line":394,"column":10,"nodeType":"197","messageId":"198","endLine":394,"endColumn":16},{"ruleId":"195","severity":1,"message":"211","line":520,"column":10,"nodeType":"197","messageId":"198","endLine":520,"endColumn":16},{"ruleId":"195","severity":1,"message":"211","line":646,"column":10,"nodeType":"197","messageId":"198","endLine":646,"endColumn":16},{"ruleId":"195","severity":1,"message":"216","line":4,"column":8,"nodeType":"197","messageId":"198","endLine":4,"endColumn":16},{"ruleId":"195","severity":1,"message":"217","line":8,"column":10,"nodeType":"197","messageId":"198","endLine":8,"endColumn":19},{"ruleId":"195","severity":1,"message":"218","line":8,"column":21,"nodeType":"197","messageId":"198","endLine":8,"endColumn":30},{"ruleId":"195","severity":1,"message":"219","line":25,"column":10,"nodeType":"197","messageId":"198","endLine":25,"endColumn":28},{"ruleId":"195","severity":1,"message":"220","line":25,"column":30,"nodeType":"197","messageId":"198","endLine":25,"endColumn":51},{"ruleId":"221","severity":1,"message":"222","line":58,"column":21,"nodeType":"223","messageId":"224","endLine":58,"endColumn":23},{"ruleId":"195","severity":1,"message":"225","line":97,"column":29,"nodeType":"197","messageId":"198","endLine":97,"endColumn":49},{"ruleId":"195","severity":1,"message":"226","line":101,"column":5,"nodeType":"197","messageId":"198","endLine":101,"endColumn":29},{"ruleId":"195","severity":1,"message":"220","line":20,"column":30,"nodeType":"197","messageId":"198","endLine":20,"endColumn":51},{"ruleId":"195","severity":1,"message":"220","line":21,"column":30,"nodeType":"197","messageId":"198","endLine":21,"endColumn":51},{"ruleId":"195","severity":1,"message":"220","line":20,"column":30,"nodeType":"197","messageId":"198","endLine":20,"endColumn":51},{"ruleId":"195","severity":1,"message":"217","line":9,"column":10,"nodeType":"197","messageId":"198","endLine":9,"endColumn":19},{"ruleId":"195","severity":1,"message":"218","line":9,"column":21,"nodeType":"197","messageId":"198","endLine":9,"endColumn":30},{"ruleId":"195","severity":1,"message":"219","line":26,"column":10,"nodeType":"197","messageId":"198","endLine":26,"endColumn":28},{"ruleId":"195","severity":1,"message":"220","line":26,"column":30,"nodeType":"197","messageId":"198","endLine":26,"endColumn":51},{"ruleId":"221","severity":1,"message":"222","line":59,"column":21,"nodeType":"223","messageId":"224","endLine":59,"endColumn":23},{"ruleId":"195","severity":1,"message":"220","line":20,"column":30,"nodeType":"197","messageId":"198","endLine":20,"endColumn":51},"no-native-reassign",["227"],"no-negated-in-lhs",["228"],"no-unused-vars","'Menu' is defined but never used.","Identifier","unusedVar","'Dropdown' is defined but never used.","'AddCircleIcon' is defined but never used.","'ErrorOutlineIcon' is defined but never used.","'AccountCircleIcon' is defined but never used.","'ClearIcon' is defined but never used.","'useFormik' is defined but never used.","'AddOrder' is assigned a value but never used.","'userData' is assigned a value but never used.","'genericLoader' is assigned a value but never used.","'statusList' is assigned a value but never used.","'devicesList' is assigned a value but never used.","'ValidationSchema' is assigned a value but never used.","'height' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["229"],"'MenuItem' is defined but never used.","'CheckIcon' is defined but never used.","'CloseIcon' is defined but never used.","'inventoryAuditData' is assigned a value but never used.","'setInventoryAuditData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setInventoryFormData' is assigned a value but never used.","'setInventoryCommentsData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"230","fix":"231"},"Update the dependencies array to be: [fetchData]",{"range":"232","text":"233"},[1249,1251],"[fetchData]"]