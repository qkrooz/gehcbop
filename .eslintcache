[{"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\index.js":"1","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\App.js":"2","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_resources\\serverRoutes.js":"3","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_resources\\useLocalStorage.js":"4","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\Main.js":"5","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_context\\MainContext.js":"6","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\login\\index.js":"7","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\index.js":"8","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\index.js":"9","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\Tabs.js":"10","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\resources\\InstallCartContext.js":"11","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Dashboard.js":"12","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Inventory.js":"13","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Orders.js":"14","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\Tabs.js":"15","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\screens\\Inventory.js":"16","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\tableIcons.js":"17","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\screens\\Miscellaneous.js":"18","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\CartsChart.js":"19","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\OrdersChart.js":"20","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\OrdersTotalChart.js":"21"},{"size":282,"mtime":1611605404924,"results":"22","hashOfConfig":"23"},{"size":3850,"mtime":1611612597743,"results":"24","hashOfConfig":"23"},{"size":131,"mtime":1611609583421,"results":"25","hashOfConfig":"23"},{"size":1289,"mtime":1611605404924,"results":"26","hashOfConfig":"23"},{"size":10608,"mtime":1611954573635,"results":"27","hashOfConfig":"23"},{"size":75,"mtime":1611605404872,"results":"28","hashOfConfig":"23"},{"size":4943,"mtime":1611610275498,"results":"29","hashOfConfig":"23"},{"size":7938,"mtime":1611863620590,"results":"30","hashOfConfig":"23"},{"size":167,"mtime":1611605404862,"results":"31","hashOfConfig":"23"},{"size":2267,"mtime":1611614468262,"results":"32","hashOfConfig":"23"},{"size":86,"mtime":1611605404854,"results":"33","hashOfConfig":"23"},{"size":7514,"mtime":1611861077187,"results":"34","hashOfConfig":"23"},{"size":6797,"mtime":1611954383095,"results":"35","hashOfConfig":"23"},{"size":27687,"mtime":1611954728630,"results":"36","hashOfConfig":"23"},{"size":2022,"mtime":1611605404854,"results":"37","hashOfConfig":"23"},{"size":6169,"mtime":1611863676760,"results":"38","hashOfConfig":"23"},{"size":2307,"mtime":1611605404864,"results":"39","hashOfConfig":"23"},{"size":104,"mtime":1611605404864,"results":"40","hashOfConfig":"23"},{"size":2598,"mtime":1611862276820,"results":"41","hashOfConfig":"23"},{"size":4128,"mtime":1611862504791,"results":"42","hashOfConfig":"23"},{"size":2176,"mtime":1611768923219,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1rcz7gi",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\index.js",[],["91","92"],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\App.js",[],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_resources\\serverRoutes.js",[],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_resources\\useLocalStorage.js",[],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\Main.js",[],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_context\\MainContext.js",[],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\login\\index.js",[],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\index.js",[],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\index.js",[],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\Tabs.js",[],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\resources\\InstallCartContext.js",[],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Dashboard.js",["93","94"],"import React, { useLayoutEffect, useContext, useState } from \"react\";\r\nimport { InstallCartContext } from \"../resources/InstallCartContext\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport \"../styles/dashboard.css\";\r\nimport CartsChart from \"../components/CartsChart\";\r\nimport OrdersChart from \"../components/OrdersChart\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nconst Dashboard = React.memo(() => {\r\n  return (\r\n    <div className=\"dashboardMainContainer\">\r\n      <div className=\"upperCharts\">\r\n        <div className=\"leftChartContainer\">\r\n          <Dash1 />\r\n        </div>\r\n        <div className=\"rightChartContainer\">\r\n          <OrdersChart />\r\n          <CartsChart />\r\n        </div>\r\n      </div>\r\n      <div className=\"lowerCharts\">\r\n        <div className=\"leftChartContainer2\">\r\n          <Dash2 />\r\n          <Dash4 />\r\n          <Dash3 />\r\n          <Dash6 />\r\n        </div>\r\n        <div className=\"rightChartContainer2\">\r\n          <Dash5 />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\nconst Dash1 = () => {\r\n  const { completeOrdersState } = useContext(InstallCartContext);\r\n  const [completeOrders] = completeOrdersState;\r\n  useLayoutEffect(() => {\r\n    if (completeOrders.length !== 0) {\r\n      // Themes begin\r\n      am4core.useTheme(am4themes_animated);\r\n      // Themes end\r\n      // Create chart instance\r\n      var chart = am4core.create(\"lineChartContainer\", am4charts.XYChart);\r\n      // data generation\r\n      let dash2Data = [];\r\n      let tempCompleteOrders = completeOrders.filter(\r\n        (item) => item.STATUS === \"order completed\"\r\n      );\r\n\r\n      tempCompleteOrders.forEach((item) => {\r\n        if (item.DEVICE_COUNT !== \"\") {\r\n          let date = item.SHIP_DATE.trim();\r\n          let value = JSON.parse(item.DEVICE_COUNT).reduce(\r\n            (accum, item) => accum + parseInt(item.quantity),\r\n            0\r\n          );\r\n          dash2Data.push({ date: date, value: value });\r\n        }\r\n      });\r\n      dash2Data.sort(function (a, b) {\r\n        return new Date(b.date) - new Date(a.date);\r\n      });\r\n      dash2Data.reverse();\r\n      chart.data = dash2Data;\r\n      // Set input format for the dates\r\n      chart.dateFormatter.inputDateFormat = \"MM/dd/yyyy\";\r\n      // Create axes\r\n      var dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n      var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n      // Create series\r\n      var series = chart.series.push(new am4charts.LineSeries());\r\n      series.dataFields.valueY = \"value\";\r\n      series.dataFields.dateX = \"date\";\r\n      series.tooltipText = \"{value}\";\r\n      series.strokeWidth = 2;\r\n      series.minBulletDistance = 15;\r\n      // Drop-shaped tooltips\r\n      series.tooltip.background.cornerRadius = 20;\r\n      series.tooltip.background.strokeOpacity = 0;\r\n      series.tooltip.pointerOrientation = \"vertical\";\r\n      series.tooltip.label.minWidth = 40;\r\n      series.tooltip.label.minHeight = 40;\r\n      series.tooltip.label.textAlign = \"middle\";\r\n      series.tooltip.label.textValign = \"middle\";\r\n      // Make bullets grow on hover\r\n      var bullet = series.bullets.push(new am4charts.CircleBullet());\r\n      bullet.circle.strokeWidth = 2;\r\n      bullet.circle.radius = 4;\r\n      bullet.circle.fill = am4core.color(\"#fff\");\r\n      var bullethover = bullet.states.create(\"hover\");\r\n      bullethover.properties.scale = 1.3;\r\n      // Make a panning cursor\r\n      chart.cursor = new am4charts.XYCursor();\r\n      chart.cursor.behavior = \"panXY\";\r\n      chart.cursor.xAxis = dateAxis;\r\n      chart.cursor.snapToSeries = series;\r\n      // Create vertical scrollbar and place it before the value axis\r\n      chart.scrollbarY = new am4core.Scrollbar();\r\n      chart.scrollbarY.parent = chart.leftAxesContainer;\r\n      chart.scrollbarY.toBack();\r\n      // Create a horizontal scrollbar with previe and place it underneath the date axis\r\n      chart.scrollbarX = new am4charts.XYChartScrollbar();\r\n      chart.scrollbarX.series.push(series);\r\n      chart.scrollbarX.parent = chart.bottomAxesContainer;\r\n      dateAxis.start = 0.9;\r\n      dateAxis.keepSelection = true;\r\n    }\r\n  }, [completeOrders]);\r\n  return (\r\n    <div className=\"dash1Container\">\r\n      <div id=\"lineChartContainer\"></div>\r\n      <div className=\"tableDataContainer\"></div>\r\n    </div>\r\n  );\r\n};\r\nconst Dash2 = () => {\r\n  const { completeOrdersState } = useContext(InstallCartContext);\r\n  const [completeOrders] = completeOrdersState;\r\n  return (\r\n    <div className=\"dash2Container\">\r\n      <span style={{ color: \"gray\", fontSize: \"0.8em\", marginBottom: \"1em\" }}>\r\n        Orders completed:\r\n      </span>\r\n      <span style={{ fontSize: \"3em\" }}>\r\n        {\r\n          completeOrders.filter((item) => item.STATUS === \"order completed\")\r\n            .length\r\n        }\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\nconst Dash3 = () => {\r\n  const { completeOrdersState } = useContext(InstallCartContext);\r\n  const [completeOrders] = completeOrdersState;\r\n  const [value, setValue] = useState();\r\n  useLayoutEffect(() => {\r\n    if (completeOrders.length !== 0) {\r\n      let tempValue = 0;\r\n      let temporalCompleteOrders = completeOrders.filter(\r\n        (item) => item.STATUS === \"order completed\"\r\n      );\r\n      temporalCompleteOrders.forEach((item) => {\r\n        if (item.DEVICE_COUNT !== \"\") {\r\n          let value = JSON.parse(item.DEVICE_COUNT).reduce(\r\n            (accum, item) => accum + parseInt(item.quantity),\r\n            0\r\n          );\r\n          tempValue += value;\r\n        }\r\n      });\r\n      setValue(tempValue);\r\n    }\r\n  }, [completeOrders]);\r\n  return (\r\n    <div className=\"dash2Container\">\r\n      <span style={{ color: \"gray\", fontSize: \"0.8em\", marginBottom: \"1em\" }}>\r\n        Total delivered devices:\r\n      </span>\r\n      <span style={{ fontSize: \"3em\" }}>{value ? value : \" \"}</span>\r\n    </div>\r\n  );\r\n};\r\nconst Dash4 = () => {\r\n  const { completeOrdersState } = useContext(InstallCartContext);\r\n  const [completeOrders] = completeOrdersState;\r\n  return (\r\n    <div className=\"dash2Container\">\r\n      <span style={{ color: \"gray\", fontSize: \"0.8em\", marginBottom: \"1em\" }}>\r\n        Orders on course:\r\n      </span>\r\n      <span style={{ fontSize: \"3em\" }}>\r\n        {\r\n          completeOrders.filter(\r\n            (item) =>\r\n              item.STATUS !== \"order completed\" && item.STAUTS !== \"cancelled\"\r\n          ).length\r\n        }\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\nconst Dash6 = () => {\r\n  const { completeOrdersState } = useContext(InstallCartContext);\r\n  const [completeOrders] = completeOrdersState;\r\n  return (\r\n    <div className=\"dash2Container\">\r\n      <span style={{ color: \"gray\", fontSize: \"0.8em\", marginBottom: \"1em\" }}>\r\n        Completion average:\r\n      </span>\r\n      <div>\r\n        <span style={{ fontSize: \"3em\", color: \"green\" }}>\r\n          {(\r\n            (completeOrders.filter((item) => item.STATUS === \"order completed\")\r\n              .length *\r\n              100) /\r\n            completeOrders.filter((item) => item.STATUS !== \"cancelled\").length\r\n          ).toFixed(2) + \"%\"}\r\n        </span>\r\n        <ArrowUpwardIcon style={{ fontSize: \"2em\", color: \"green\" }} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst Dash7 = () => {\r\n  return <div className=\"dash2Container\"></div>;\r\n};\r\nconst Dash5 = () => {\r\n  return <div className=\"dash3Container\"></div>;\r\n};\r\nexport default Dashboard;\r\n","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Inventory.js",["95"],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\screens\\Orders.js",["96","97","98","99","100","101","102","103","104","105","106"],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\components\\Tabs.js",[],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\screens\\Inventory.js",["107"],"import { useState, useEffect, useContext, useCallback } from \"react\";\r\nimport { Context } from \"../../../_context/MainContext\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport \"../styles/inventory.css\";\r\nimport useLocalStorage from \"../../../_resources/useLocalStorage\";\r\nimport axios from \"axios\";\r\nimport { tableIcons } from \"../resources/tableIcons\";\r\nimport MaterialTable from \"material-table\";\r\nimport MoreVert from \"@material-ui/icons/MoreVert\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nconst Inventory = () => {\r\n  const { BASE_URL, currentApplicationState } = useContext(Context);\r\n  const [dataLoading, setDataLoading] = useState(true);\r\n  const [columns, setColumns] = useState([]);\r\n  const [currentApplication] = currentApplicationState;\r\n  const [height, setHeight] = useState(null);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  // const [rowData_action, setRowData_action] = useState({});\r\n  const [rowMenu_visibility, setRowMenu_visibility] = useState(false);\r\n  const [its_inventory_section, set_its_inventory_section] = useLocalStorage(\r\n    \"its_inventory_section\",\r\n    \"desktops\"\r\n  );\r\n  const [tableData, setTableData] = useState([]);\r\n  const getData = (section) => {\r\n    setDataLoading(true);\r\n    axios\r\n      .post(`${BASE_URL}/${currentApplication}/fetchMaster.php`, {\r\n        section: section,\r\n      })\r\n      .then((response) => {\r\n        if (response.data.code === 200) {\r\n          const tempColumns = response.data.columns;\r\n          let finalColumns = [];\r\n          tempColumns.forEach((item) => {\r\n            let temporalObj = {\r\n              title: item.COLUMN_NAME.toUpperCase(),\r\n              field: item.COLUMN_NAME,\r\n            };\r\n            finalColumns.push(temporalObj);\r\n          });\r\n          setColumns(finalColumns);\r\n          setTableData(response.data.data);\r\n          setDataLoading(false);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  const openMenu = (event, rowData) => {\r\n    let anchorElement = event.currentTarget;\r\n    setAnchorEl(anchorElement);\r\n    setRowMenu_visibility(true);\r\n  };\r\n  const heightdiv = useCallback((node) => {\r\n    if (node !== null) {\r\n      setHeight(node.getBoundingClientRect().height);\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    getData(its_inventory_section);\r\n    // eslint-disable-next-line\r\n  }, [its_inventory_section]);\r\n  const rowMenuRender = (\r\n    <Menu\r\n      id=\"simple-menu\"\r\n      anchorEl={anchorEl}\r\n      keepMounted\r\n      open={rowMenu_visibility}\r\n      onClose={() => {\r\n        setAnchorEl(null);\r\n      }}\r\n    >\r\n      <MenuItem>Edit</MenuItem>\r\n    </Menu>\r\n  );\r\n  return (\r\n    <div className=\"inventoryContainer\">\r\n      <div className=\"controls\">\r\n        <ButtonGroup\r\n          disableElevation\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          aria-label=\"contained primary button group\"\r\n        >\r\n          <Button\r\n            className={\r\n              its_inventory_section === \"desktops\" ? \"button-active\" : null\r\n            }\r\n            onClick={() => {\r\n              set_its_inventory_section(\"desktops\");\r\n            }}\r\n          >\r\n            Desktops\r\n          </Button>\r\n          <Button\r\n            className={\r\n              its_inventory_section === \"laptops\" ? \"button-active\" : null\r\n            }\r\n            onClick={() => {\r\n              set_its_inventory_section(\"laptops\");\r\n            }}\r\n          >\r\n            Laptops\r\n          </Button>\r\n          <Button\r\n            className={\r\n              its_inventory_section === \"mobiles\" ? \"button-active\" : null\r\n            }\r\n            onClick={() => {\r\n              set_its_inventory_section(\"mobiles\");\r\n            }}\r\n          >\r\n            Mobiles\r\n          </Button>\r\n          <Button\r\n            className={\r\n              its_inventory_section === \"label_printers\"\r\n                ? \"button-active\"\r\n                : null\r\n            }\r\n            onClick={() => {\r\n              set_its_inventory_section(\"label_printers\");\r\n            }}\r\n          >\r\n            Label Printers\r\n          </Button>\r\n          <Button\r\n            className={\r\n              its_inventory_section === \"laser_printers\"\r\n                ? \"button-active\"\r\n                : null\r\n            }\r\n            onClick={() => {\r\n              set_its_inventory_section(\"laser_printers\");\r\n            }}\r\n          >\r\n            Laser Printers\r\n          </Button>\r\n          <Button\r\n            className={\r\n              its_inventory_section === \"reserved_ips\" ? \"button-active\" : null\r\n            }\r\n            onClick={() => {\r\n              set_its_inventory_section(\"reserved_ips\");\r\n            }}\r\n          >\r\n            Reserverd Ip's\r\n          </Button>\r\n        </ButtonGroup>\r\n      </div>\r\n      <div className=\"its_inventory_tableContainer\" ref={heightdiv}>\r\n        <MaterialTable\r\n          icons={tableIcons}\r\n          localization={{\r\n            header: {\r\n              actions: \"\",\r\n            },\r\n          }}\r\n          actions={[\r\n            {\r\n              icon: () => (\r\n                <MoreVert\r\n                  color=\"disabled\"\r\n                  aria-controls=\"simple-menu\"\r\n                  aria-haspopup=\"true\"\r\n                />\r\n              ),\r\n              tooltip: \"More\",\r\n              onClick: (event, rowData) => {\r\n                openMenu(event, rowData);\r\n              },\r\n            },\r\n          ]}\r\n          title=\"\"\r\n          isLoading={dataLoading}\r\n          options={{\r\n            actionsColumnIndex: -1,\r\n            padding: \"dense\",\r\n            toolbar: true,\r\n            search: true,\r\n            headerStyle: { position: \"sticky\", top: 0 },\r\n            pageSizeOptions: [25, 50, 100, tableData.length],\r\n            pageSize: 25,\r\n            minBodyHeight: height - 135,\r\n            maxBodyHeight: height - 135,\r\n          }}\r\n          columns={columns}\r\n          data={tableData}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Inventory;\r\n","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\resources\\tableIcons.js",[],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\itsupport\\screens\\Miscellaneous.js",[],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\CartsChart.js",["108","109","110"],"import React, { useContext, useLayoutEffect } from \"react\";\r\nimport { InstallCartContext } from \"../resources/InstallCartContext\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport \"../styles/charts.css\";\r\nconst CartsChart = React.memo((props) => {\r\n  const { cartsState } = useContext(InstallCartContext);\r\n  const [carts] = cartsState;\r\n  useLayoutEffect(() => {\r\n    var chart = am4core.create(\"chartdiv2\", am4charts.XYChart);\r\n    let data = [\r\n      {\r\n        cartType: \"In Stock\",\r\n        value: carts.filter((item) => item.STATUS === \"In Stock\").length,\r\n      },\r\n      {\r\n        cartType: \"Reserved In\",\r\n        value: carts.filter((item) => item.STATUS === \"Reserved In\").length,\r\n      },\r\n      {\r\n        cartType: \"Reserved\",\r\n        value: carts.filter((item) => item.STATUS === \"Reserved\").length,\r\n      },\r\n      {\r\n        cartType: \"Deployed\",\r\n        value: carts.filter((item) => item.STATUS === \"Deployed\").length,\r\n      },\r\n    ];\r\n    chart.data = data;\r\n    var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n    categoryAxis.dataFields.category = \"cartType\";\r\n    categoryAxis.renderer.grid.template.location = 0;\r\n    categoryAxis.renderer.minGridDistance = 30;\r\n\r\n    categoryAxis.renderer.labels.template.adapter.add(\r\n      \"dy\",\r\n      function (dy, target) {\r\n        if (target.dataItem && target.dataItem.index & (2 == 2)) {\r\n          return dy + 25;\r\n        }\r\n        return dy;\r\n      }\r\n    );\r\n\r\n    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n\r\n    // Create series\r\n    var series = chart.series.push(new am4charts.ColumnSeries());\r\n    series.dataFields.valueY = \"value\";\r\n    series.dataFields.categoryX = \"cartType\";\r\n    // series.name = \"cartType\";\r\n    series.columns.template.tooltipText = \"{categoryX}: [bold]{valueY}[/]\";\r\n    series.columns.template.fillOpacity = 0.8;\r\n    var columnTemplate = series.columns.template;\r\n    columnTemplate.strokeWidth = 2;\r\n    columnTemplate.strokeOpacity = 1;\r\n  }, [carts]);\r\n  return (\r\n    <div className=\"cartsChartContainer\" {...props}>\r\n      <div\r\n        className=\"deco-fix\"\r\n        style={{\r\n          width: \"25%\",\r\n          height: \"2.2em\",\r\n          position: \"absolute\",\r\n          backgroundColor: \"white\",\r\n          bottom: 0,\r\n          zIndex: 2,\r\n        }}\r\n      ></div>\r\n      <div id=\"chartdiv2\" style={{ width: \"100%\", height: \"250px\" }}></div>\r\n    </div>\r\n  );\r\n});\r\nexport default CartsChart;\r\n","C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\OrdersChart.js",[],"C:\\Users\\212774780\\Documents\\GitHub\\gehcbop\\src\\_apps\\installcart\\components\\OrdersTotalChart.js",["111"],"import React, { useContext } from \"react\";\r\nimport { InstallCartContext } from \"../resources/InstallCartContext\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nconst OrdersTotalChart = () => {\r\n  const useStyles = makeStyles({\r\n    cell: {\r\n      textAlign: \"start\",\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  const { ordersState, completeOrdersState, filteredOrdersState } = useContext(\r\n    InstallCartContext\r\n  );\r\n  const [orders] = ordersState;\r\n  const [filteredOrders] = filteredOrdersState;\r\n  const [completeOrders] = completeOrdersState;\r\n  function createData(label, quantity) {\r\n    return { label, quantity };\r\n  }\r\n\r\n  const rows = [\r\n    createData(\"Current\", orders.length),\r\n    createData(\"Total\", completeOrders.length),\r\n    createData(\r\n      \"Uncomplete\",\r\n      completeOrders.filter((item) => item.STATUS !== \"order completed\").length\r\n    ),\r\n    createData(\r\n      \"Complete\",\r\n      completeOrders.filter((item) => item.STATUS === \"order completed\").length\r\n    ),\r\n  ];\r\n\r\n  return (\r\n    <div className=\"ordersTotalChartContainer\">\r\n      <TableContainer component={Paper}>\r\n        <Table\r\n          className={classes.table}\r\n          size=\"small\"\r\n          aria-label=\"a dense table\"\r\n        >\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Concept</TableCell>\r\n              <TableCell>Qty</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow key={row.label}>\r\n                <TableCell>{row.label}</TableCell>\r\n                <TableCell>{row.quantity}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </div>\r\n  );\r\n};\r\nexport default OrdersTotalChart;\r\n",{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":71,"column":11,"nodeType":"118","messageId":"119","endLine":71,"endColumn":20},{"ruleId":"116","severity":1,"message":"120","line":207,"column":7,"nodeType":"118","messageId":"119","endLine":207,"endColumn":12},{"ruleId":"121","severity":1,"message":"122","line":206,"column":6,"nodeType":"123","endLine":206,"endColumn":28,"suggestions":"124"},{"ruleId":"116","severity":1,"message":"125","line":16,"column":3,"nodeType":"118","messageId":"119","endLine":16,"endColumn":6},{"ruleId":"116","severity":1,"message":"126","line":17,"column":3,"nodeType":"118","messageId":"119","endLine":17,"endColumn":6},{"ruleId":"116","severity":1,"message":"127","line":31,"column":10,"nodeType":"118","messageId":"119","endLine":31,"endColumn":16},{"ruleId":"116","severity":1,"message":"128","line":42,"column":10,"nodeType":"118","messageId":"119","endLine":42,"endColumn":19},{"ruleId":"116","severity":1,"message":"129","line":43,"column":13,"nodeType":"118","messageId":"119","endLine":43,"endColumn":16},{"ruleId":"116","severity":1,"message":"130","line":54,"column":10,"nodeType":"118","messageId":"119","endLine":54,"endColumn":21},{"ruleId":"121","severity":1,"message":"131","line":180,"column":6,"nodeType":"123","endLine":180,"endColumn":14,"suggestions":"132"},{"ruleId":"116","severity":1,"message":"133","line":501,"column":5,"nodeType":"118","messageId":"119","endLine":501,"endColumn":13},{"ruleId":"116","severity":1,"message":"134","line":510,"column":10,"nodeType":"118","messageId":"119","endLine":510,"endColumn":20},{"ruleId":"116","severity":1,"message":"135","line":511,"column":10,"nodeType":"118","messageId":"119","endLine":511,"endColumn":21},{"ruleId":"136","severity":1,"message":"137","line":549,"column":11,"nodeType":"138","endLine":549,"endColumn":25},{"ruleId":"116","severity":1,"message":"139","line":67,"column":9,"nodeType":"118","messageId":"119","endLine":67,"endColumn":22},{"ruleId":"116","severity":1,"message":"140","line":5,"column":8,"nodeType":"118","messageId":"119","endLine":5,"endColumn":26},{"ruleId":"141","severity":1,"message":"142","line":39,"column":57,"nodeType":"143","messageId":"144","endLine":39,"endColumn":63},{"ruleId":"116","severity":1,"message":"117","line":46,"column":9,"nodeType":"118","messageId":"119","endLine":46,"endColumn":18},{"ruleId":"116","severity":1,"message":"145","line":22,"column":10,"nodeType":"118","messageId":"119","endLine":22,"endColumn":24},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"no-unused-vars","'valueAxis' is assigned a value but never used.","Identifier","unusedVar","'Dash7' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'carts', 'cartsColumns', 'completeOrders', 'inserts', 'insertsColumns', and 'ordersColumns'. Either include them or remove the dependency array.","ArrayExpression",["148"],"'Row' is defined but never used.","'Col' is defined but never used.","'Formik' is defined but never used.","'useFormik' is defined but never used.","'Yup' is defined but never used.","'ModeComment' is defined but never used.","React Hook useEffect has missing dependencies: 'data.STATUS' and 'statusList'. Either include them or remove the dependency array.",["149"],"'AddOrder' is assigned a value but never used.","'statusList' is assigned a value but never used.","'devicesList' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'rowMenuRender' is assigned a value but never used.","'am4themes_animated' is defined but never used.","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","'filteredOrders' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},"Update the dependencies array to be: [carts, cartsColumns, completeOrders, ic_inventory_section, inserts, insertsColumns, ordersColumns]",{"range":"154","text":"155"},"Update the dependencies array to be: [data.STATUS, orders, statusList]",{"range":"156","text":"157"},[4827,4849],"[carts, cartsColumns, completeOrders, ic_inventory_section, inserts, insertsColumns, ordersColumns]",[5994,6002],"[data.STATUS, orders, statusList]"]